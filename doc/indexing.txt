The scientific problem is the following: given a protein sequence
database (e.g., the human proteome) rapidly extract a set of peptides
that have a mass within a given mass range. Variations on the problem
vary the way in which the mass of the peptides can be calculated.

In the simplest form of the problem, the mass of each peptide can be
calculated merely by adding the fixed masses of its constituent amino
acids, and so there is a fixed one-to-one mapping between peptide and
mass. An obvious solution to this problem is to precompute the mass of
each peptide for a particular proteome, and then create an index sorted
on mass with pointers into the sequence database for each peptide.

In a more sophisticated form of the problem, the query specifies not
just the mass range, but also a one-to-one mapping between amino acids
and masses. In this case, there is still a one-to-one mapping between
peptide and mass, but unlike before, the peptide's mass is not fixed,
so one cannot pre-compute the mass of each peptide in advance.

A still more challenging form of the problem involves a query in which
each amino acid can have multiple masses. In this case, there is a
one-to-many relationship between peptide and mass.

These three problems can be described a little more abstractly in the
following way.

We are given 

 o a set S of sequences s_1, \dots, s_n of varying lengths, each
   drawn from a finite alphabet A,

 o a mapping M from letters in A to real numbers (masses), and

 o  minimum and maximum masses m_{min} and m_{max}.

The problem is to efficiently locate all sequences s \in S such that

	  m_{min} \leq \sum_{i=1}^{|s|} M(s^i) \leq m_{max},

where |s| is the length of s, and s^i denotes the ith letter in s.

In the simplest version of the problem, S, A and M are known in
advance, M is one-to-one, and a query consists of m_{min} and
m_{max}.  In the second problem, a query consists of M, m_{min}
and m_{max}.  And in the third problem, M is one-to-many, and a
query is again M, m_{min} and m_{max}.

How can S and A be organized to make the three kinds of queries described
fast? A typical size for S is 3 x 10^8 characters, A is 20 characters,
and M can vary depending on the problem.




