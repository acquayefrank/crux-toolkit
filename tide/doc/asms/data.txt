Tide achieves dramatic speed improvements over a recent
version of SEQUEST (dated 11/20/2009) on benchmark datasets. For the
yeast benchmark, Tide showed a 670-fold speedup over SEQUEST (5300 vs
7.9 spectra/second on average). For the worm benchmark, Tide showed a
1300-fold speedup over SEQUEST (3000 vs 2.3 spectra/second on
average). Tide showed a dramatic speedup over Crux as well (version dated
4/14/09) on the benchmarks: 480-fold for yeast and 2400-fold
for worm. Tide searched a larger set of 34,499 worm spectra with
multiple charge states in 10.5 seconds.

All timing experiments used a precursor mass window of 3.0 Daltons,
tryptic peptide databases with no post-translational modifications,
and full XCorr calculation on all candidate peptide-spectrum matches.

An initial rewrite, called Tide-v0, of Crux's search method was
45-fold faster than Crux, producing nearly identical XCorr scores
to Crux's, which closely match SEQUEST's. Tide-v0, like Crux, included
a candidate peptide index sorted by precuror mass index. In Tide-v0,
this index resided in memory, eliminating most disk seeks. Later
versions of Tide do not require the peptide index to fit in memory.
Tide-v0 used a heapify operation to find high-scoring peptide-spectrum
matches.

A series of optimizations was applied to successive versions of Tide,
preserving program output. Each Tide version was profiled and analyzed
for opportunities for increased speed. Selected techniques
cumulatively yielded reductions in total running time as follows:

Sparsely representing theoretical peaks: -32%

Improved memory management: -33%

Linear replaces quadratic algorithm for subtracting background peaks: -47%

Maintaining a queue of active peptides, sorting spectra by precursor
mass, computing each theoretical spectrum only once: -65%

Eliminating a memory lookup during the tight dot-product loop: -17%

Using a fivefold sparser representation of theoretical peaks: -24%

Custom memory allocator and just-in-time compilation of per-peptide
specialized dot-product code: -42%

Other improvements included caching multiplications of commonly used
theoretical peak heights and use of fixed-point arithmetic.
