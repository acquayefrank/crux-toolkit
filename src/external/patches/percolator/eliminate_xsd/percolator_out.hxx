// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_USERS_CEGRANT_PROJECTS_CRUX_TRUNK_SRC_EXTERNAL_BUILD_SRC_PERCOLATOR_SRC_XML_PERCOLATOR_OUT_HXX
#define CXX_USERS_CEGRANT_PROJECTS_CRUX_TRUNK_SRC_EXTERNAL_BUILD_SRC_PERCOLATOR_SRC_XML_PERCOLATOR_OUT_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/xdr-stream-insertion.hxx>
#include <xsd/cxx/tree/stream-insertion.hxx>

#include <xsd/cxx/tree/xdr-stream-extraction.hxx>
#include <xsd/cxx/tree/stream-extraction.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Data representation output stream template.
  //
  using ::xsd::cxx::tree::ostream;

  // Data representation input stream template.
  //
  using ::xsd::cxx::tree::istream;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace percolatorOutNs
{
  class probability_t;
  class aa_seq_t;
  class aa_term_t;
  class probability_t_member;
  class probability_t_member1;
  class process_info;
  class retentionTime;
  class peptide_seq;
  class psm_ids;
  class psm;
  class psms;
  class peptide;
  class peptides;
  class protein;
  class proteins;
  class percolator_output;
  class comment;
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/istream-fwd.hxx>

namespace percolatorOutNs
{
  class probability_t: public ::xml_schema::string
  {
    public:

    probability_t (const char* v);

    probability_t (const ::std::string& v);

    probability_t (::xml_schema::istream< XDR >& s,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    probability_t (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    probability_t (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    probability_t (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    probability_t (const probability_t& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual probability_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class aa_seq_t: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    aa_seq_t ();

    aa_seq_t (const char*);

    aa_seq_t (const ::std::string&);

    aa_seq_t (const ::xml_schema::string&);

    aa_seq_t (::xml_schema::istream< XDR >& s,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    aa_seq_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    aa_seq_t (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    aa_seq_t (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    aa_seq_t (const aa_seq_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual aa_seq_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~aa_seq_t ();
  };

  class aa_term_t: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    aa_term_t ();

    aa_term_t (const char*);

    aa_term_t (const ::std::string&);

    aa_term_t (const ::xml_schema::string&);

    aa_term_t (::xml_schema::istream< XDR >& s,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    aa_term_t (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    aa_term_t (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    aa_term_t (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    aa_term_t (const aa_term_t& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual aa_term_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~aa_term_t ();
  };

  class probability_t_member: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >
  {
    public:
    probability_t_member (::xml_schema::double_ v);

    probability_t_member (::xml_schema::istream< XDR >& s,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    probability_t_member (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    probability_t_member (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    probability_t_member (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    probability_t_member (const probability_t_member& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual probability_t_member*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class probability_t_member1: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >
  {
    public:
    // Constructors.
    //
    probability_t_member1 (const ::xml_schema::double_&);

    probability_t_member1 (::xml_schema::istream< XDR >& s,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    probability_t_member1 (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    probability_t_member1 (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    probability_t_member1 (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    probability_t_member1 (const probability_t_member1& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual probability_t_member1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~probability_t_member1 ();
  };

  class process_info: public ::xml_schema::type
  {
    public:
    // command_line
    // 
    typedef ::xml_schema::string command_line_type;
    typedef ::xsd::cxx::tree::traits< command_line_type, char > command_line_traits;

    const command_line_type&
    command_line () const;

    command_line_type&
    command_line ();

    void
    command_line (const command_line_type& x);

    void
    command_line (::std::auto_ptr< command_line_type > p);

    // other_command_line
    // 
    typedef ::xml_schema::string other_command_line_type;
    typedef ::xsd::cxx::tree::traits< other_command_line_type, char > other_command_line_traits;

    const other_command_line_type&
    other_command_line () const;

    other_command_line_type&
    other_command_line ();

    void
    other_command_line (const other_command_line_type& x);

    void
    other_command_line (::std::auto_ptr< other_command_line_type > p);

    // pi_0_psms
    // 
    typedef ::percolatorOutNs::probability_t pi_0_psms_type;
    typedef ::xsd::cxx::tree::optional< pi_0_psms_type > pi_0_psms_optional;
    typedef ::xsd::cxx::tree::traits< pi_0_psms_type, char > pi_0_psms_traits;

    const pi_0_psms_optional&
    pi_0_psms () const;

    pi_0_psms_optional&
    pi_0_psms ();

    void
    pi_0_psms (const pi_0_psms_type& x);

    void
    pi_0_psms (const pi_0_psms_optional& x);

    void
    pi_0_psms (::std::auto_ptr< pi_0_psms_type > p);

    // pi_0_peptides
    // 
    typedef ::percolatorOutNs::probability_t pi_0_peptides_type;
    typedef ::xsd::cxx::tree::optional< pi_0_peptides_type > pi_0_peptides_optional;
    typedef ::xsd::cxx::tree::traits< pi_0_peptides_type, char > pi_0_peptides_traits;

    const pi_0_peptides_optional&
    pi_0_peptides () const;

    pi_0_peptides_optional&
    pi_0_peptides ();

    void
    pi_0_peptides (const pi_0_peptides_type& x);

    void
    pi_0_peptides (const pi_0_peptides_optional& x);

    void
    pi_0_peptides (::std::auto_ptr< pi_0_peptides_type > p);

    // pi_0_proteins
    // 
    typedef ::percolatorOutNs::probability_t pi_0_proteins_type;
    typedef ::xsd::cxx::tree::optional< pi_0_proteins_type > pi_0_proteins_optional;
    typedef ::xsd::cxx::tree::traits< pi_0_proteins_type, char > pi_0_proteins_traits;

    const pi_0_proteins_optional&
    pi_0_proteins () const;

    pi_0_proteins_optional&
    pi_0_proteins ();

    void
    pi_0_proteins (const pi_0_proteins_type& x);

    void
    pi_0_proteins (const pi_0_proteins_optional& x);

    void
    pi_0_proteins (::std::auto_ptr< pi_0_proteins_type > p);

    // average_delta_mass
    // 
    typedef ::xml_schema::double_ average_delta_mass_type;
    typedef ::xsd::cxx::tree::optional< average_delta_mass_type > average_delta_mass_optional;
    typedef ::xsd::cxx::tree::traits< average_delta_mass_type, char, ::xsd::cxx::tree::schema_type::double_ > average_delta_mass_traits;

    const average_delta_mass_optional&
    average_delta_mass () const;

    average_delta_mass_optional&
    average_delta_mass ();

    void
    average_delta_mass (const average_delta_mass_type& x);

    void
    average_delta_mass (const average_delta_mass_optional& x);

    // average_pi
    // 
    typedef ::xml_schema::double_ average_pi_type;
    typedef ::xsd::cxx::tree::optional< average_pi_type > average_pi_optional;
    typedef ::xsd::cxx::tree::traits< average_pi_type, char, ::xsd::cxx::tree::schema_type::double_ > average_pi_traits;

    const average_pi_optional&
    average_pi () const;

    average_pi_optional&
    average_pi ();

    void
    average_pi (const average_pi_type& x);

    void
    average_pi (const average_pi_optional& x);

    // comment
    // 
    typedef ::percolatorOutNs::comment comment_type;
    typedef ::xsd::cxx::tree::sequence< comment_type > comment_sequence;
    typedef comment_sequence::iterator comment_iterator;
    typedef comment_sequence::const_iterator comment_const_iterator;
    typedef ::xsd::cxx::tree::traits< comment_type, char > comment_traits;

    const comment_sequence&
    comment () const;

    comment_sequence&
    comment ();

    void
    comment (const comment_sequence& s);

    // Constructors.
    //
    process_info (const command_line_type&,
                  const other_command_line_type&);

    process_info (::xml_schema::istream< XDR >& s,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    process_info (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    process_info (const process_info& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual process_info*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~process_info ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    ::xsd::cxx::tree::one< command_line_type > command_line_;
    ::xsd::cxx::tree::one< other_command_line_type > other_command_line_;
    pi_0_psms_optional pi_0_psms_;
    pi_0_peptides_optional pi_0_peptides_;
    pi_0_proteins_optional pi_0_proteins_;
    average_delta_mass_optional average_delta_mass_;
    average_pi_optional average_pi_;
    comment_sequence comment_;
  };

  class retentionTime: public ::xml_schema::type
  {
    public:
    // predicted
    // 
    typedef ::xml_schema::double_ predicted_type;
    typedef ::xsd::cxx::tree::optional< predicted_type > predicted_optional;
    typedef ::xsd::cxx::tree::traits< predicted_type, char, ::xsd::cxx::tree::schema_type::double_ > predicted_traits;

    const predicted_optional&
    predicted () const;

    predicted_optional&
    predicted ();

    void
    predicted (const predicted_type& x);

    void
    predicted (const predicted_optional& x);

    // observed
    // 
    typedef ::xml_schema::double_ observed_type;
    typedef ::xsd::cxx::tree::optional< observed_type > observed_optional;
    typedef ::xsd::cxx::tree::traits< observed_type, char, ::xsd::cxx::tree::schema_type::double_ > observed_traits;

    const observed_optional&
    observed () const;

    observed_optional&
    observed ();

    void
    observed (const observed_type& x);

    void
    observed (const observed_optional& x);

    // Constructors.
    //
    retentionTime ();

    retentionTime (::xml_schema::istream< XDR >& s,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    retentionTime (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    retentionTime (const retentionTime& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual retentionTime*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~retentionTime ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    predicted_optional predicted_;
    observed_optional observed_;
  };

  class peptide_seq: public ::xml_schema::type
  {
    public:
    // n
    // 
    typedef ::percolatorOutNs::aa_term_t n_type;
    typedef ::xsd::cxx::tree::optional< n_type > n_optional;
    typedef ::xsd::cxx::tree::traits< n_type, char > n_traits;

    const n_optional&
    n () const;

    n_optional&
    n ();

    void
    n (const n_type& x);

    void
    n (const n_optional& x);

    void
    n (::std::auto_ptr< n_type > p);

    // c
    // 
    typedef ::percolatorOutNs::aa_term_t c_type;
    typedef ::xsd::cxx::tree::optional< c_type > c_optional;
    typedef ::xsd::cxx::tree::traits< c_type, char > c_traits;

    const c_optional&
    c () const;

    c_optional&
    c ();

    void
    c (const c_type& x);

    void
    c (const c_optional& x);

    void
    c (::std::auto_ptr< c_type > p);

    // seq
    // 
    typedef ::percolatorOutNs::aa_seq_t seq_type;
    typedef ::xsd::cxx::tree::traits< seq_type, char > seq_traits;

    const seq_type&
    seq () const;

    seq_type&
    seq ();

    void
    seq (const seq_type& x);

    void
    seq (::std::auto_ptr< seq_type > p);

    // Constructors.
    //
    peptide_seq (const seq_type&);

    peptide_seq (::xml_schema::istream< XDR >& s,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    peptide_seq (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    peptide_seq (const peptide_seq& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual peptide_seq*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~peptide_seq ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    n_optional n_;
    c_optional c_;
    ::xsd::cxx::tree::one< seq_type > seq_;
  };

  class psm_ids: public ::xml_schema::type
  {
    public:
    // psm_id
    // 
    typedef ::xml_schema::string psm_id_type;
    typedef ::xsd::cxx::tree::sequence< psm_id_type > psm_id_sequence;
    typedef psm_id_sequence::iterator psm_id_iterator;
    typedef psm_id_sequence::const_iterator psm_id_const_iterator;
    typedef ::xsd::cxx::tree::traits< psm_id_type, char > psm_id_traits;

    const psm_id_sequence&
    psm_id () const;

    psm_id_sequence&
    psm_id ();

    void
    psm_id (const psm_id_sequence& s);

    // Constructors.
    //
    psm_ids ();

    psm_ids (::xml_schema::istream< XDR >& s,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    psm_ids (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    psm_ids (const psm_ids& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual psm_ids*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~psm_ids ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    psm_id_sequence psm_id_;
  };

  class psm: public ::xml_schema::type
  {
    public:
    // svm_score
    // 
    typedef ::xml_schema::double_ svm_score_type;
    typedef ::xsd::cxx::tree::traits< svm_score_type, char, ::xsd::cxx::tree::schema_type::double_ > svm_score_traits;

    const svm_score_type&
    svm_score () const;

    svm_score_type&
    svm_score ();

    void
    svm_score (const svm_score_type& x);

    // q_value
    // 
    typedef ::percolatorOutNs::probability_t q_value_type;
    typedef ::xsd::cxx::tree::traits< q_value_type, char > q_value_traits;

    const q_value_type&
    q_value () const;

    q_value_type&
    q_value ();

    void
    q_value (const q_value_type& x);

    void
    q_value (::std::auto_ptr< q_value_type > p);

    // pep
    // 
    typedef ::percolatorOutNs::probability_t pep_type;
    typedef ::xsd::cxx::tree::traits< pep_type, char > pep_traits;

    const pep_type&
    pep () const;

    pep_type&
    pep ();

    void
    pep (const pep_type& x);

    void
    pep (::std::auto_ptr< pep_type > p);

    // exp_mass
    // 
    typedef ::xml_schema::double_ exp_mass_type;
    typedef ::xsd::cxx::tree::optional< exp_mass_type > exp_mass_optional;
    typedef ::xsd::cxx::tree::traits< exp_mass_type, char, ::xsd::cxx::tree::schema_type::double_ > exp_mass_traits;

    const exp_mass_optional&
    exp_mass () const;

    exp_mass_optional&
    exp_mass ();

    void
    exp_mass (const exp_mass_type& x);

    void
    exp_mass (const exp_mass_optional& x);

    // calc_mass
    // 
    typedef ::xml_schema::double_ calc_mass_type;
    typedef ::xsd::cxx::tree::optional< calc_mass_type > calc_mass_optional;
    typedef ::xsd::cxx::tree::traits< calc_mass_type, char, ::xsd::cxx::tree::schema_type::double_ > calc_mass_traits;

    const calc_mass_optional&
    calc_mass () const;

    calc_mass_optional&
    calc_mass ();

    void
    calc_mass (const calc_mass_type& x);

    void
    calc_mass (const calc_mass_optional& x);

    // retentionTime
    // 
    typedef ::percolatorOutNs::retentionTime retentionTime_type;
    typedef ::xsd::cxx::tree::optional< retentionTime_type > retentionTime_optional;
    typedef ::xsd::cxx::tree::traits< retentionTime_type, char > retentionTime_traits;

    const retentionTime_optional&
    retentionTime () const;

    retentionTime_optional&
    retentionTime ();

    void
    retentionTime (const retentionTime_type& x);

    void
    retentionTime (const retentionTime_optional& x);

    void
    retentionTime (::std::auto_ptr< retentionTime_type > p);

    // peptide_seq
    // 
    typedef ::percolatorOutNs::peptide_seq peptide_seq_type;
    typedef ::xsd::cxx::tree::traits< peptide_seq_type, char > peptide_seq_traits;

    const peptide_seq_type&
    peptide_seq () const;

    peptide_seq_type&
    peptide_seq ();

    void
    peptide_seq (const peptide_seq_type& x);

    void
    peptide_seq (::std::auto_ptr< peptide_seq_type > p);

    // protein_id
    // 
    typedef ::xml_schema::string protein_id_type;
    typedef ::xsd::cxx::tree::sequence< protein_id_type > protein_id_sequence;
    typedef protein_id_sequence::iterator protein_id_iterator;
    typedef protein_id_sequence::const_iterator protein_id_const_iterator;
    typedef ::xsd::cxx::tree::traits< protein_id_type, char > protein_id_traits;

    const protein_id_sequence&
    protein_id () const;

    protein_id_sequence&
    protein_id ();

    void
    protein_id (const protein_id_sequence& s);

    // p_value
    // 
    typedef ::percolatorOutNs::probability_t p_value_type;
    typedef ::xsd::cxx::tree::traits< p_value_type, char > p_value_traits;

    const p_value_type&
    p_value () const;

    p_value_type&
    p_value ();

    void
    p_value (const p_value_type& x);

    void
    p_value (::std::auto_ptr< p_value_type > p);

    // psm_id
    // 
    typedef ::xml_schema::string psm_id_type;
    typedef ::xsd::cxx::tree::traits< psm_id_type, char > psm_id_traits;

    const psm_id_type&
    psm_id () const;

    psm_id_type&
    psm_id ();

    void
    psm_id (const psm_id_type& x);

    void
    psm_id (::std::auto_ptr< psm_id_type > p);

    // decoy
    // 
    typedef ::xml_schema::boolean decoy_type;
    typedef ::xsd::cxx::tree::optional< decoy_type > decoy_optional;
    typedef ::xsd::cxx::tree::traits< decoy_type, char > decoy_traits;

    const decoy_optional&
    decoy () const;

    decoy_optional&
    decoy ();

    void
    decoy (const decoy_type& x);

    void
    decoy (const decoy_optional& x);

    // Constructors.
    //
    psm (const svm_score_type&,
         const q_value_type&,
         const pep_type&,
         const peptide_seq_type&,
         const p_value_type&,
         const psm_id_type&);

    psm (const svm_score_type&,
         const q_value_type&,
         const pep_type&,
         ::std::auto_ptr< peptide_seq_type >&,
         const p_value_type&,
         const psm_id_type&);

    psm (::xml_schema::istream< XDR >& s,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    psm (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    psm (const psm& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual psm*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~psm ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    ::xsd::cxx::tree::one< svm_score_type > svm_score_;
    ::xsd::cxx::tree::one< q_value_type > q_value_;
    ::xsd::cxx::tree::one< pep_type > pep_;
    exp_mass_optional exp_mass_;
    calc_mass_optional calc_mass_;
    retentionTime_optional retentionTime_;
    ::xsd::cxx::tree::one< peptide_seq_type > peptide_seq_;
    protein_id_sequence protein_id_;
    ::xsd::cxx::tree::one< p_value_type > p_value_;
    ::xsd::cxx::tree::one< psm_id_type > psm_id_;
    decoy_optional decoy_;
  };

  class psms: public ::xml_schema::type
  {
    public:
    // psm
    // 
    typedef ::percolatorOutNs::psm psm_type;
    typedef ::xsd::cxx::tree::sequence< psm_type > psm_sequence;
    typedef psm_sequence::iterator psm_iterator;
    typedef psm_sequence::const_iterator psm_const_iterator;
    typedef ::xsd::cxx::tree::traits< psm_type, char > psm_traits;

    const psm_sequence&
    psm () const;

    psm_sequence&
    psm ();

    void
    psm (const psm_sequence& s);

    // Constructors.
    //
    psms ();

    psms (::xml_schema::istream< XDR >& s,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    psms (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    psms (const psms& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual psms*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~psms ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    psm_sequence psm_;
  };

  class peptide: public ::xml_schema::type
  {
    public:
    // svm_score
    // 
    typedef ::xml_schema::double_ svm_score_type;
    typedef ::xsd::cxx::tree::traits< svm_score_type, char, ::xsd::cxx::tree::schema_type::double_ > svm_score_traits;

    const svm_score_type&
    svm_score () const;

    svm_score_type&
    svm_score ();

    void
    svm_score (const svm_score_type& x);

    // q_value
    // 
    typedef ::percolatorOutNs::probability_t q_value_type;
    typedef ::xsd::cxx::tree::traits< q_value_type, char > q_value_traits;

    const q_value_type&
    q_value () const;

    q_value_type&
    q_value ();

    void
    q_value (const q_value_type& x);

    void
    q_value (::std::auto_ptr< q_value_type > p);

    // pep
    // 
    typedef ::percolatorOutNs::probability_t pep_type;
    typedef ::xsd::cxx::tree::traits< pep_type, char > pep_traits;

    const pep_type&
    pep () const;

    pep_type&
    pep ();

    void
    pep (const pep_type& x);

    void
    pep (::std::auto_ptr< pep_type > p);

    // exp_mass
    // 
    typedef ::xml_schema::double_ exp_mass_type;
    typedef ::xsd::cxx::tree::optional< exp_mass_type > exp_mass_optional;
    typedef ::xsd::cxx::tree::traits< exp_mass_type, char, ::xsd::cxx::tree::schema_type::double_ > exp_mass_traits;

    const exp_mass_optional&
    exp_mass () const;

    exp_mass_optional&
    exp_mass ();

    void
    exp_mass (const exp_mass_type& x);

    void
    exp_mass (const exp_mass_optional& x);

    // calc_mass
    // 
    typedef ::xml_schema::double_ calc_mass_type;
    typedef ::xsd::cxx::tree::optional< calc_mass_type > calc_mass_optional;
    typedef ::xsd::cxx::tree::traits< calc_mass_type, char, ::xsd::cxx::tree::schema_type::double_ > calc_mass_traits;

    const calc_mass_optional&
    calc_mass () const;

    calc_mass_optional&
    calc_mass ();

    void
    calc_mass (const calc_mass_type& x);

    void
    calc_mass (const calc_mass_optional& x);

    // retentionTime
    // 
    typedef ::percolatorOutNs::retentionTime retentionTime_type;
    typedef ::xsd::cxx::tree::optional< retentionTime_type > retentionTime_optional;
    typedef ::xsd::cxx::tree::traits< retentionTime_type, char > retentionTime_traits;

    const retentionTime_optional&
    retentionTime () const;

    retentionTime_optional&
    retentionTime ();

    void
    retentionTime (const retentionTime_type& x);

    void
    retentionTime (const retentionTime_optional& x);

    void
    retentionTime (::std::auto_ptr< retentionTime_type > p);

    // protein_id
    // 
    typedef ::xml_schema::string protein_id_type;
    typedef ::xsd::cxx::tree::sequence< protein_id_type > protein_id_sequence;
    typedef protein_id_sequence::iterator protein_id_iterator;
    typedef protein_id_sequence::const_iterator protein_id_const_iterator;
    typedef ::xsd::cxx::tree::traits< protein_id_type, char > protein_id_traits;

    const protein_id_sequence&
    protein_id () const;

    protein_id_sequence&
    protein_id ();

    void
    protein_id (const protein_id_sequence& s);

    // p_value
    // 
    typedef ::percolatorOutNs::probability_t p_value_type;
    typedef ::xsd::cxx::tree::traits< p_value_type, char > p_value_traits;

    const p_value_type&
    p_value () const;

    p_value_type&
    p_value ();

    void
    p_value (const p_value_type& x);

    void
    p_value (::std::auto_ptr< p_value_type > p);

    // psm_ids
    // 
    typedef ::percolatorOutNs::psm_ids psm_ids_type;
    typedef ::xsd::cxx::tree::traits< psm_ids_type, char > psm_ids_traits;

    const psm_ids_type&
    psm_ids () const;

    psm_ids_type&
    psm_ids ();

    void
    psm_ids (const psm_ids_type& x);

    void
    psm_ids (::std::auto_ptr< psm_ids_type > p);

    // peptide_id
    // 
    typedef ::percolatorOutNs::aa_seq_t peptide_id_type;
    typedef ::xsd::cxx::tree::traits< peptide_id_type, char > peptide_id_traits;

    const peptide_id_type&
    peptide_id () const;

    peptide_id_type&
    peptide_id ();

    void
    peptide_id (const peptide_id_type& x);

    void
    peptide_id (::std::auto_ptr< peptide_id_type > p);

    // decoy
    // 
    typedef ::xml_schema::boolean decoy_type;
    typedef ::xsd::cxx::tree::optional< decoy_type > decoy_optional;
    typedef ::xsd::cxx::tree::traits< decoy_type, char > decoy_traits;

    const decoy_optional&
    decoy () const;

    decoy_optional&
    decoy ();

    void
    decoy (const decoy_type& x);

    void
    decoy (const decoy_optional& x);

    // Constructors.
    //
    peptide (const svm_score_type&,
             const q_value_type&,
             const pep_type&,
             const p_value_type&,
             const psm_ids_type&,
             const peptide_id_type&);

    peptide (const svm_score_type&,
             const q_value_type&,
             const pep_type&,
             const p_value_type&,
             ::std::auto_ptr< psm_ids_type >&,
             const peptide_id_type&);

    peptide (::xml_schema::istream< XDR >& s,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    peptide (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    peptide (const peptide& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual peptide*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~peptide ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    ::xsd::cxx::tree::one< svm_score_type > svm_score_;
    ::xsd::cxx::tree::one< q_value_type > q_value_;
    ::xsd::cxx::tree::one< pep_type > pep_;
    exp_mass_optional exp_mass_;
    calc_mass_optional calc_mass_;
    retentionTime_optional retentionTime_;
    protein_id_sequence protein_id_;
    ::xsd::cxx::tree::one< p_value_type > p_value_;
    ::xsd::cxx::tree::one< psm_ids_type > psm_ids_;
    ::xsd::cxx::tree::one< peptide_id_type > peptide_id_;
    decoy_optional decoy_;
  };

  class peptides: public ::xml_schema::type
  {
    public:
    // peptide
    // 
    typedef ::percolatorOutNs::peptide peptide_type;
    typedef ::xsd::cxx::tree::sequence< peptide_type > peptide_sequence;
    typedef peptide_sequence::iterator peptide_iterator;
    typedef peptide_sequence::const_iterator peptide_const_iterator;
    typedef ::xsd::cxx::tree::traits< peptide_type, char > peptide_traits;

    const peptide_sequence&
    peptide () const;

    peptide_sequence&
    peptide ();

    void
    peptide (const peptide_sequence& s);

    // Constructors.
    //
    peptides ();

    peptides (::xml_schema::istream< XDR >& s,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    peptides (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    peptides (const peptides& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual peptides*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~peptides ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    peptide_sequence peptide_;
  };

  class protein: public ::xml_schema::type
  {
    public:
    // pep
    // 
    typedef ::percolatorOutNs::probability_t pep_type;
    typedef ::xsd::cxx::tree::optional< pep_type > pep_optional;
    typedef ::xsd::cxx::tree::traits< pep_type, char > pep_traits;

    const pep_optional&
    pep () const;

    pep_optional&
    pep ();

    void
    pep (const pep_type& x);

    void
    pep (const pep_optional& x);

    void
    pep (::std::auto_ptr< pep_type > p);

    // q_value
    // 
    typedef ::percolatorOutNs::probability_t q_value_type;
    typedef ::xsd::cxx::tree::traits< q_value_type, char > q_value_traits;

    const q_value_type&
    q_value () const;

    q_value_type&
    q_value ();

    void
    q_value (const q_value_type& x);

    void
    q_value (::std::auto_ptr< q_value_type > p);

    // peptide_seq
    // 
    typedef ::percolatorOutNs::peptide_seq peptide_seq_type;
    typedef ::xsd::cxx::tree::sequence< peptide_seq_type > peptide_seq_sequence;
    typedef peptide_seq_sequence::iterator peptide_seq_iterator;
    typedef peptide_seq_sequence::const_iterator peptide_seq_const_iterator;
    typedef ::xsd::cxx::tree::traits< peptide_seq_type, char > peptide_seq_traits;

    const peptide_seq_sequence&
    peptide_seq () const;

    peptide_seq_sequence&
    peptide_seq ();

    void
    peptide_seq (const peptide_seq_sequence& s);

    // protein_id
    // 
    typedef ::xml_schema::string protein_id_type;
    typedef ::xsd::cxx::tree::traits< protein_id_type, char > protein_id_traits;

    const protein_id_type&
    protein_id () const;

    protein_id_type&
    protein_id ();

    void
    protein_id (const protein_id_type& x);

    void
    protein_id (::std::auto_ptr< protein_id_type > p);

    // decoy
    // 
    typedef ::xml_schema::boolean decoy_type;
    typedef ::xsd::cxx::tree::optional< decoy_type > decoy_optional;
    typedef ::xsd::cxx::tree::traits< decoy_type, char > decoy_traits;

    const decoy_optional&
    decoy () const;

    decoy_optional&
    decoy ();

    void
    decoy (const decoy_type& x);

    void
    decoy (const decoy_optional& x);

    // Constructors.
    //
    protein (const q_value_type&,
             const protein_id_type&);

    protein (::xml_schema::istream< XDR >& s,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    protein (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    protein (const protein& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual protein*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~protein ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    pep_optional pep_;
    ::xsd::cxx::tree::one< q_value_type > q_value_;
    peptide_seq_sequence peptide_seq_;
    ::xsd::cxx::tree::one< protein_id_type > protein_id_;
    decoy_optional decoy_;
  };

  class proteins: public ::xml_schema::type
  {
    public:
    // protein
    // 
    typedef ::percolatorOutNs::protein protein_type;
    typedef ::xsd::cxx::tree::sequence< protein_type > protein_sequence;
    typedef protein_sequence::iterator protein_iterator;
    typedef protein_sequence::const_iterator protein_const_iterator;
    typedef ::xsd::cxx::tree::traits< protein_type, char > protein_traits;

    const protein_sequence&
    protein () const;

    protein_sequence&
    protein ();

    void
    protein (const protein_sequence& s);

    // Constructors.
    //
    proteins ();

    proteins (::xml_schema::istream< XDR >& s,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    proteins (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    proteins (const proteins& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual proteins*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~proteins ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    protein_sequence protein_;
  };

  class percolator_output: public ::xml_schema::type
  {
    public:
    // process_info
    // 
    typedef ::percolatorOutNs::process_info process_info_type;
    typedef ::xsd::cxx::tree::traits< process_info_type, char > process_info_traits;

    const process_info_type&
    process_info () const;

    process_info_type&
    process_info ();

    void
    process_info (const process_info_type& x);

    void
    process_info (::std::auto_ptr< process_info_type > p);

    // psms
    // 
    typedef ::percolatorOutNs::psms psms_type;
    typedef ::xsd::cxx::tree::traits< psms_type, char > psms_traits;

    const psms_type&
    psms () const;

    psms_type&
    psms ();

    void
    psms (const psms_type& x);

    void
    psms (::std::auto_ptr< psms_type > p);

    // peptides
    // 
    typedef ::percolatorOutNs::peptides peptides_type;
    typedef ::xsd::cxx::tree::optional< peptides_type > peptides_optional;
    typedef ::xsd::cxx::tree::traits< peptides_type, char > peptides_traits;

    const peptides_optional&
    peptides () const;

    peptides_optional&
    peptides ();

    void
    peptides (const peptides_type& x);

    void
    peptides (const peptides_optional& x);

    void
    peptides (::std::auto_ptr< peptides_type > p);

    // proteins
    // 
    typedef ::percolatorOutNs::proteins proteins_type;
    typedef ::xsd::cxx::tree::optional< proteins_type > proteins_optional;
    typedef ::xsd::cxx::tree::traits< proteins_type, char > proteins_traits;

    const proteins_optional&
    proteins () const;

    proteins_optional&
    proteins ();

    void
    proteins (const proteins_type& x);

    void
    proteins (const proteins_optional& x);

    void
    proteins (::std::auto_ptr< proteins_type > p);

    // percolator_version
    // 
    typedef ::xml_schema::string percolator_version_type;
    typedef ::xsd::cxx::tree::traits< percolator_version_type, char > percolator_version_traits;

    const percolator_version_type&
    percolator_version () const;

    percolator_version_type&
    percolator_version ();

    void
    percolator_version (const percolator_version_type& x);

    void
    percolator_version (::std::auto_ptr< percolator_version_type > p);

    // majorVersion
    // 
    typedef ::xml_schema::unsigned_short majorVersion_type;
    typedef ::xsd::cxx::tree::traits< majorVersion_type, char > majorVersion_traits;

    const majorVersion_type&
    majorVersion () const;

    static majorVersion_type
    majorVersion_default_value ();

    // minorVersion
    // 
    typedef ::xml_schema::unsigned_short minorVersion_type;
    typedef ::xsd::cxx::tree::traits< minorVersion_type, char > minorVersion_traits;

    const minorVersion_type&
    minorVersion () const;

    minorVersion_type&
    minorVersion ();

    void
    minorVersion (const minorVersion_type& x);

    // Constructors.
    //
    percolator_output (const process_info_type&,
                       const psms_type&,
                       const percolator_version_type&,
                       const minorVersion_type&);

    percolator_output (::std::auto_ptr< process_info_type >&,
                       ::std::auto_ptr< psms_type >&,
                       const percolator_version_type&,
                       const minorVersion_type&);

    percolator_output (::xml_schema::istream< XDR >& s,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    percolator_output (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    percolator_output (const percolator_output& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual percolator_output*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~percolator_output ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    ::xsd::cxx::tree::one< process_info_type > process_info_;
    ::xsd::cxx::tree::one< psms_type > psms_;
    peptides_optional peptides_;
    proteins_optional proteins_;
    ::xsd::cxx::tree::one< percolator_version_type > percolator_version_;
    ::xsd::cxx::tree::one< majorVersion_type > majorVersion_;
    ::xsd::cxx::tree::one< minorVersion_type > minorVersion_;
  };

  class comment: public ::xml_schema::type
  {
    public:
    // name
    // 
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // value
    // 
    typedef ::xml_schema::string value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    comment (const name_type&,
             const value_type&);

    comment (::xml_schema::istream< XDR >& s,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    comment (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    comment (const comment& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual comment*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~comment ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< value_type > value_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace percolatorOutNs
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (const ::std::string& uri,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (const ::std::string& uri,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (const ::std::string& uri,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (::std::istream& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (::std::istream& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (::std::istream& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (::std::istream& is,
       const ::std::string& id,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (::xercesc::InputSource& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (::xercesc::InputSource& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (::xercesc::InputSource& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace percolatorOutNs
{
  void
  operator<< (::xercesc::DOMElement&, const probability_t&);

  void
  operator<< (::xercesc::DOMAttr&, const probability_t&);

  void
  operator<< (::xml_schema::list_stream&,
              const probability_t&);

  void
  operator<< (::xercesc::DOMElement&, const aa_seq_t&);

  void
  operator<< (::xercesc::DOMAttr&, const aa_seq_t&);

  void
  operator<< (::xml_schema::list_stream&,
              const aa_seq_t&);

  void
  operator<< (::xercesc::DOMElement&, const aa_term_t&);

  void
  operator<< (::xercesc::DOMAttr&, const aa_term_t&);

  void
  operator<< (::xml_schema::list_stream&,
              const aa_term_t&);

  // Serialize to std::ostream.
  //

  void
  process_info_ (::std::ostream& os,
                 const ::percolatorOutNs::process_info& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  process_info_ (::std::ostream& os,
                 const ::percolatorOutNs::process_info& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  process_info_ (::std::ostream& os,
                 const ::percolatorOutNs::process_info& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  process_info_ (::xercesc::XMLFormatTarget& ft,
                 const ::percolatorOutNs::process_info& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  process_info_ (::xercesc::XMLFormatTarget& ft,
                 const ::percolatorOutNs::process_info& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  process_info_ (::xercesc::XMLFormatTarget& ft,
                 const ::percolatorOutNs::process_info& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  process_info_ (::xercesc::DOMDocument& d,
                 const ::percolatorOutNs::process_info& x,
                 ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  process_info_ (const ::percolatorOutNs::process_info& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  svm_score (::std::ostream& os,
             const ::xml_schema::double_& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  svm_score (::std::ostream& os,
             const ::xml_schema::double_& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  svm_score (::std::ostream& os,
             const ::xml_schema::double_& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  svm_score (::xercesc::XMLFormatTarget& ft,
             const ::xml_schema::double_& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  svm_score (::xercesc::XMLFormatTarget& ft,
             const ::xml_schema::double_& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  svm_score (::xercesc::XMLFormatTarget& ft,
             const ::xml_schema::double_& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  svm_score (::xercesc::DOMDocument& d,
             const ::xml_schema::double_& x,
             ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  svm_score (const ::xml_schema::double_& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  q_value (::std::ostream& os,
           const ::percolatorOutNs::probability_t& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  q_value (::std::ostream& os,
           const ::percolatorOutNs::probability_t& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  q_value (::std::ostream& os,
           const ::percolatorOutNs::probability_t& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  q_value (::xercesc::XMLFormatTarget& ft,
           const ::percolatorOutNs::probability_t& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  q_value (::xercesc::XMLFormatTarget& ft,
           const ::percolatorOutNs::probability_t& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  q_value (::xercesc::XMLFormatTarget& ft,
           const ::percolatorOutNs::probability_t& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  q_value (::xercesc::DOMDocument& d,
           const ::percolatorOutNs::probability_t& x,
           ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  q_value (const ::percolatorOutNs::probability_t& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  pep (::std::ostream& os,
       const ::percolatorOutNs::probability_t& x, 
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  void
  pep (::std::ostream& os,
       const ::percolatorOutNs::probability_t& x, 
       ::xml_schema::error_handler& eh,
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  void
  pep (::std::ostream& os,
       const ::percolatorOutNs::probability_t& x, 
       ::xercesc::DOMErrorHandler& eh,
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  pep (::xercesc::XMLFormatTarget& ft,
       const ::percolatorOutNs::probability_t& x, 
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  void
  pep (::xercesc::XMLFormatTarget& ft,
       const ::percolatorOutNs::probability_t& x, 
       ::xml_schema::error_handler& eh,
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  void
  pep (::xercesc::XMLFormatTarget& ft,
       const ::percolatorOutNs::probability_t& x, 
       ::xercesc::DOMErrorHandler& eh,
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  pep (::xercesc::DOMDocument& d,
       const ::percolatorOutNs::probability_t& x,
       ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  pep (const ::percolatorOutNs::probability_t& x, 
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  exp_mass (::std::ostream& os,
            const ::xml_schema::double_& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  exp_mass (::std::ostream& os,
            const ::xml_schema::double_& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  exp_mass (::std::ostream& os,
            const ::xml_schema::double_& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  exp_mass (::xercesc::XMLFormatTarget& ft,
            const ::xml_schema::double_& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  exp_mass (::xercesc::XMLFormatTarget& ft,
            const ::xml_schema::double_& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  exp_mass (::xercesc::XMLFormatTarget& ft,
            const ::xml_schema::double_& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  exp_mass (::xercesc::DOMDocument& d,
            const ::xml_schema::double_& x,
            ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  exp_mass (const ::xml_schema::double_& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  calc_mass (::std::ostream& os,
             const ::xml_schema::double_& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  calc_mass (::std::ostream& os,
             const ::xml_schema::double_& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  calc_mass (::std::ostream& os,
             const ::xml_schema::double_& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  calc_mass (::xercesc::XMLFormatTarget& ft,
             const ::xml_schema::double_& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  calc_mass (::xercesc::XMLFormatTarget& ft,
             const ::xml_schema::double_& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  calc_mass (::xercesc::XMLFormatTarget& ft,
             const ::xml_schema::double_& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  calc_mass (::xercesc::DOMDocument& d,
             const ::xml_schema::double_& x,
             ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  calc_mass (const ::xml_schema::double_& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  retentionTime_ (::std::ostream& os,
                  const ::percolatorOutNs::retentionTime& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  retentionTime_ (::std::ostream& os,
                  const ::percolatorOutNs::retentionTime& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  retentionTime_ (::std::ostream& os,
                  const ::percolatorOutNs::retentionTime& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  retentionTime_ (::xercesc::XMLFormatTarget& ft,
                  const ::percolatorOutNs::retentionTime& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  retentionTime_ (::xercesc::XMLFormatTarget& ft,
                  const ::percolatorOutNs::retentionTime& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  retentionTime_ (::xercesc::XMLFormatTarget& ft,
                  const ::percolatorOutNs::retentionTime& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  retentionTime_ (::xercesc::DOMDocument& d,
                  const ::percolatorOutNs::retentionTime& x,
                  ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  retentionTime_ (const ::percolatorOutNs::retentionTime& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  peptide_seq_ (::std::ostream& os,
                const ::percolatorOutNs::peptide_seq& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  peptide_seq_ (::std::ostream& os,
                const ::percolatorOutNs::peptide_seq& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  peptide_seq_ (::std::ostream& os,
                const ::percolatorOutNs::peptide_seq& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  peptide_seq_ (::xercesc::XMLFormatTarget& ft,
                const ::percolatorOutNs::peptide_seq& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  peptide_seq_ (::xercesc::XMLFormatTarget& ft,
                const ::percolatorOutNs::peptide_seq& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  peptide_seq_ (::xercesc::XMLFormatTarget& ft,
                const ::percolatorOutNs::peptide_seq& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  peptide_seq_ (::xercesc::DOMDocument& d,
                const ::percolatorOutNs::peptide_seq& x,
                ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  peptide_seq_ (const ::percolatorOutNs::peptide_seq& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  protein_id (::std::ostream& os,
              const ::xml_schema::string& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  protein_id (::std::ostream& os,
              const ::xml_schema::string& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  protein_id (::std::ostream& os,
              const ::xml_schema::string& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  protein_id (::xercesc::XMLFormatTarget& ft,
              const ::xml_schema::string& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  protein_id (::xercesc::XMLFormatTarget& ft,
              const ::xml_schema::string& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  protein_id (::xercesc::XMLFormatTarget& ft,
              const ::xml_schema::string& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  protein_id (::xercesc::DOMDocument& d,
              const ::xml_schema::string& x,
              ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  protein_id (const ::xml_schema::string& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  psm_ids_ (::std::ostream& os,
            const ::percolatorOutNs::psm_ids& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  psm_ids_ (::std::ostream& os,
            const ::percolatorOutNs::psm_ids& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  psm_ids_ (::std::ostream& os,
            const ::percolatorOutNs::psm_ids& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  psm_ids_ (::xercesc::XMLFormatTarget& ft,
            const ::percolatorOutNs::psm_ids& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  psm_ids_ (::xercesc::XMLFormatTarget& ft,
            const ::percolatorOutNs::psm_ids& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  psm_ids_ (::xercesc::XMLFormatTarget& ft,
            const ::percolatorOutNs::psm_ids& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  psm_ids_ (::xercesc::DOMDocument& d,
            const ::percolatorOutNs::psm_ids& x,
            ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  psm_ids_ (const ::percolatorOutNs::psm_ids& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  p_value (::std::ostream& os,
           const ::percolatorOutNs::probability_t& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  p_value (::std::ostream& os,
           const ::percolatorOutNs::probability_t& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  p_value (::std::ostream& os,
           const ::percolatorOutNs::probability_t& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  p_value (::xercesc::XMLFormatTarget& ft,
           const ::percolatorOutNs::probability_t& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  p_value (::xercesc::XMLFormatTarget& ft,
           const ::percolatorOutNs::probability_t& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  p_value (::xercesc::XMLFormatTarget& ft,
           const ::percolatorOutNs::probability_t& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  p_value (::xercesc::DOMDocument& d,
           const ::percolatorOutNs::probability_t& x,
           ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  p_value (const ::percolatorOutNs::probability_t& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  psm_ (::std::ostream& os,
        const ::percolatorOutNs::psm& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  psm_ (::std::ostream& os,
        const ::percolatorOutNs::psm& x, 
        ::xml_schema::error_handler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  psm_ (::std::ostream& os,
        const ::percolatorOutNs::psm& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  psm_ (::xercesc::XMLFormatTarget& ft,
        const ::percolatorOutNs::psm& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  psm_ (::xercesc::XMLFormatTarget& ft,
        const ::percolatorOutNs::psm& x, 
        ::xml_schema::error_handler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  psm_ (::xercesc::XMLFormatTarget& ft,
        const ::percolatorOutNs::psm& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  psm_ (::xercesc::DOMDocument& d,
        const ::percolatorOutNs::psm& x,
        ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  psm_ (const ::percolatorOutNs::psm& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  psms_ (::std::ostream& os,
         const ::percolatorOutNs::psms& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  psms_ (::std::ostream& os,
         const ::percolatorOutNs::psms& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  psms_ (::std::ostream& os,
         const ::percolatorOutNs::psms& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  psms_ (::xercesc::XMLFormatTarget& ft,
         const ::percolatorOutNs::psms& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  psms_ (::xercesc::XMLFormatTarget& ft,
         const ::percolatorOutNs::psms& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  psms_ (::xercesc::XMLFormatTarget& ft,
         const ::percolatorOutNs::psms& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  psms_ (::xercesc::DOMDocument& d,
         const ::percolatorOutNs::psms& x,
         ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  psms_ (const ::percolatorOutNs::psms& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  peptide_ (::std::ostream& os,
            const ::percolatorOutNs::peptide& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  peptide_ (::std::ostream& os,
            const ::percolatorOutNs::peptide& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  peptide_ (::std::ostream& os,
            const ::percolatorOutNs::peptide& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  peptide_ (::xercesc::XMLFormatTarget& ft,
            const ::percolatorOutNs::peptide& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  peptide_ (::xercesc::XMLFormatTarget& ft,
            const ::percolatorOutNs::peptide& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  peptide_ (::xercesc::XMLFormatTarget& ft,
            const ::percolatorOutNs::peptide& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  peptide_ (::xercesc::DOMDocument& d,
            const ::percolatorOutNs::peptide& x,
            ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  peptide_ (const ::percolatorOutNs::peptide& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  peptides_ (::std::ostream& os,
             const ::percolatorOutNs::peptides& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  peptides_ (::std::ostream& os,
             const ::percolatorOutNs::peptides& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  peptides_ (::std::ostream& os,
             const ::percolatorOutNs::peptides& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  peptides_ (::xercesc::XMLFormatTarget& ft,
             const ::percolatorOutNs::peptides& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  peptides_ (::xercesc::XMLFormatTarget& ft,
             const ::percolatorOutNs::peptides& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  peptides_ (::xercesc::XMLFormatTarget& ft,
             const ::percolatorOutNs::peptides& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  peptides_ (::xercesc::DOMDocument& d,
             const ::percolatorOutNs::peptides& x,
             ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  peptides_ (const ::percolatorOutNs::peptides& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  protein_ (::std::ostream& os,
            const ::percolatorOutNs::protein& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  protein_ (::std::ostream& os,
            const ::percolatorOutNs::protein& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  protein_ (::std::ostream& os,
            const ::percolatorOutNs::protein& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  protein_ (::xercesc::XMLFormatTarget& ft,
            const ::percolatorOutNs::protein& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  protein_ (::xercesc::XMLFormatTarget& ft,
            const ::percolatorOutNs::protein& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  protein_ (::xercesc::XMLFormatTarget& ft,
            const ::percolatorOutNs::protein& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  protein_ (::xercesc::DOMDocument& d,
            const ::percolatorOutNs::protein& x,
            ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  protein_ (const ::percolatorOutNs::protein& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  proteins_ (::std::ostream& os,
             const ::percolatorOutNs::proteins& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  proteins_ (::std::ostream& os,
             const ::percolatorOutNs::proteins& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  proteins_ (::std::ostream& os,
             const ::percolatorOutNs::proteins& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  proteins_ (::xercesc::XMLFormatTarget& ft,
             const ::percolatorOutNs::proteins& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  proteins_ (::xercesc::XMLFormatTarget& ft,
             const ::percolatorOutNs::proteins& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  proteins_ (::xercesc::XMLFormatTarget& ft,
             const ::percolatorOutNs::proteins& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  proteins_ (::xercesc::DOMDocument& d,
             const ::percolatorOutNs::proteins& x,
             ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  proteins_ (const ::percolatorOutNs::proteins& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  percolator_output_ (::std::ostream& os,
                      const ::percolatorOutNs::percolator_output& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  percolator_output_ (::std::ostream& os,
                      const ::percolatorOutNs::percolator_output& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  percolator_output_ (::std::ostream& os,
                      const ::percolatorOutNs::percolator_output& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  percolator_output_ (::xercesc::XMLFormatTarget& ft,
                      const ::percolatorOutNs::percolator_output& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  percolator_output_ (::xercesc::XMLFormatTarget& ft,
                      const ::percolatorOutNs::percolator_output& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  percolator_output_ (::xercesc::XMLFormatTarget& ft,
                      const ::percolatorOutNs::percolator_output& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  percolator_output_ (::xercesc::DOMDocument& d,
                      const ::percolatorOutNs::percolator_output& x,
                      ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  percolator_output_ (const ::percolatorOutNs::percolator_output& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const probability_t_member&);

  void
  operator<< (::xercesc::DOMAttr&, const probability_t_member&);

  void
  operator<< (::xml_schema::list_stream&,
              const probability_t_member&);

  void
  operator<< (::xercesc::DOMElement&, const probability_t_member1&);

  void
  operator<< (::xercesc::DOMAttr&, const probability_t_member1&);

  void
  operator<< (::xml_schema::list_stream&,
              const probability_t_member1&);

  void
  operator<< (::xercesc::DOMElement&, const process_info&);

  void
  operator<< (::xercesc::DOMElement&, const retentionTime&);

  void
  operator<< (::xercesc::DOMElement&, const peptide_seq&);

  void
  operator<< (::xercesc::DOMElement&, const psm_ids&);

  void
  operator<< (::xercesc::DOMElement&, const psm&);

  void
  operator<< (::xercesc::DOMElement&, const psms&);

  void
  operator<< (::xercesc::DOMElement&, const peptide&);

  void
  operator<< (::xercesc::DOMElement&, const peptides&);

  void
  operator<< (::xercesc::DOMElement&, const protein&);

  void
  operator<< (::xercesc::DOMElement&, const proteins&);

  void
  operator<< (::xercesc::DOMElement&, const percolator_output&);

  void
  operator<< (::xercesc::DOMElement&, const comment&);
}

namespace percolatorOutNs
{
  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const probability_t&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const aa_seq_t&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const aa_term_t&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const probability_t_member&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const probability_t_member1&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const process_info&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const retentionTime&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const peptide_seq&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const psm_ids&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const psm&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const psms&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const peptide&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const peptides&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const protein&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const proteins&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const percolator_output&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const comment&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_USERS_CEGRANT_PROJECTS_CRUX_TRUNK_SRC_EXTERNAL_BUILD_SRC_PERCOLATOR_SRC_XML_PERCOLATOR_OUT_HXX
