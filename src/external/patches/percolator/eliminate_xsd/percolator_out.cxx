// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "percolator_out.hxx"

namespace percolatorOutNs
{
  // probability_t
  //

  probability_t::
  probability_t (const char* s)
  : ::xml_schema::string (s)
  {
  }

  probability_t::
  probability_t (const ::std::string& s)
  : ::xml_schema::string (s)
  {
  }

  probability_t::
  probability_t (const probability_t& o,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::string (o, f, c)
  {
  }

  // aa_seq_t
  // 


  // aa_term_t
  // 


  // probability_t_member
  // 

  probability_t_member::
  probability_t_member (::xml_schema::double_ v): ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (v)
  {
  }

  probability_t_member::
  probability_t_member (const probability_t_member& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (v, f, c)
  {
  }


  // probability_t_member1
  // 


  // process_info
  // 

  const process_info::command_line_type& process_info::
  command_line () const
  {
    return this->command_line_.get ();
  }

  process_info::command_line_type& process_info::
  command_line ()
  {
    return this->command_line_.get ();
  }

  void process_info::
  command_line (const command_line_type& x)
  {
    this->command_line_.set (x);
  }

  void process_info::
  command_line (::std::auto_ptr< command_line_type > x)
  {
    this->command_line_.set (x);
  }

  const process_info::other_command_line_type& process_info::
  other_command_line () const
  {
    return this->other_command_line_.get ();
  }

  process_info::other_command_line_type& process_info::
  other_command_line ()
  {
    return this->other_command_line_.get ();
  }

  void process_info::
  other_command_line (const other_command_line_type& x)
  {
    this->other_command_line_.set (x);
  }

  void process_info::
  other_command_line (::std::auto_ptr< other_command_line_type > x)
  {
    this->other_command_line_.set (x);
  }

  const process_info::pi_0_psms_optional& process_info::
  pi_0_psms () const
  {
    return this->pi_0_psms_;
  }

  process_info::pi_0_psms_optional& process_info::
  pi_0_psms ()
  {
    return this->pi_0_psms_;
  }

  void process_info::
  pi_0_psms (const pi_0_psms_type& x)
  {
    this->pi_0_psms_.set (x);
  }

  void process_info::
  pi_0_psms (const pi_0_psms_optional& x)
  {
    this->pi_0_psms_ = x;
  }

  void process_info::
  pi_0_psms (::std::auto_ptr< pi_0_psms_type > x)
  {
    this->pi_0_psms_.set (x);
  }

  const process_info::pi_0_peptides_optional& process_info::
  pi_0_peptides () const
  {
    return this->pi_0_peptides_;
  }

  process_info::pi_0_peptides_optional& process_info::
  pi_0_peptides ()
  {
    return this->pi_0_peptides_;
  }

  void process_info::
  pi_0_peptides (const pi_0_peptides_type& x)
  {
    this->pi_0_peptides_.set (x);
  }

  void process_info::
  pi_0_peptides (const pi_0_peptides_optional& x)
  {
    this->pi_0_peptides_ = x;
  }

  void process_info::
  pi_0_peptides (::std::auto_ptr< pi_0_peptides_type > x)
  {
    this->pi_0_peptides_.set (x);
  }

  const process_info::pi_0_proteins_optional& process_info::
  pi_0_proteins () const
  {
    return this->pi_0_proteins_;
  }

  process_info::pi_0_proteins_optional& process_info::
  pi_0_proteins ()
  {
    return this->pi_0_proteins_;
  }

  void process_info::
  pi_0_proteins (const pi_0_proteins_type& x)
  {
    this->pi_0_proteins_.set (x);
  }

  void process_info::
  pi_0_proteins (const pi_0_proteins_optional& x)
  {
    this->pi_0_proteins_ = x;
  }

  void process_info::
  pi_0_proteins (::std::auto_ptr< pi_0_proteins_type > x)
  {
    this->pi_0_proteins_.set (x);
  }

  const process_info::average_delta_mass_optional& process_info::
  average_delta_mass () const
  {
    return this->average_delta_mass_;
  }

  process_info::average_delta_mass_optional& process_info::
  average_delta_mass ()
  {
    return this->average_delta_mass_;
  }

  void process_info::
  average_delta_mass (const average_delta_mass_type& x)
  {
    this->average_delta_mass_.set (x);
  }

  void process_info::
  average_delta_mass (const average_delta_mass_optional& x)
  {
    this->average_delta_mass_ = x;
  }

  const process_info::average_pi_optional& process_info::
  average_pi () const
  {
    return this->average_pi_;
  }

  process_info::average_pi_optional& process_info::
  average_pi ()
  {
    return this->average_pi_;
  }

  void process_info::
  average_pi (const average_pi_type& x)
  {
    this->average_pi_.set (x);
  }

  void process_info::
  average_pi (const average_pi_optional& x)
  {
    this->average_pi_ = x;
  }

  const process_info::comment_sequence& process_info::
  comment () const
  {
    return this->comment_;
  }

  process_info::comment_sequence& process_info::
  comment ()
  {
    return this->comment_;
  }

  void process_info::
  comment (const comment_sequence& s)
  {
    this->comment_ = s;
  }


  // retentionTime
  // 

  const retentionTime::predicted_optional& retentionTime::
  predicted () const
  {
    return this->predicted_;
  }

  retentionTime::predicted_optional& retentionTime::
  predicted ()
  {
    return this->predicted_;
  }

  void retentionTime::
  predicted (const predicted_type& x)
  {
    this->predicted_.set (x);
  }

  void retentionTime::
  predicted (const predicted_optional& x)
  {
    this->predicted_ = x;
  }

  const retentionTime::observed_optional& retentionTime::
  observed () const
  {
    return this->observed_;
  }

  retentionTime::observed_optional& retentionTime::
  observed ()
  {
    return this->observed_;
  }

  void retentionTime::
  observed (const observed_type& x)
  {
    this->observed_.set (x);
  }

  void retentionTime::
  observed (const observed_optional& x)
  {
    this->observed_ = x;
  }


  // peptide_seq
  // 

  const peptide_seq::n_optional& peptide_seq::
  n () const
  {
    return this->n_;
  }

  peptide_seq::n_optional& peptide_seq::
  n ()
  {
    return this->n_;
  }

  void peptide_seq::
  n (const n_type& x)
  {
    this->n_.set (x);
  }

  void peptide_seq::
  n (const n_optional& x)
  {
    this->n_ = x;
  }

  void peptide_seq::
  n (::std::auto_ptr< n_type > x)
  {
    this->n_.set (x);
  }

  const peptide_seq::c_optional& peptide_seq::
  c () const
  {
    return this->c_;
  }

  peptide_seq::c_optional& peptide_seq::
  c ()
  {
    return this->c_;
  }

  void peptide_seq::
  c (const c_type& x)
  {
    this->c_.set (x);
  }

  void peptide_seq::
  c (const c_optional& x)
  {
    this->c_ = x;
  }

  void peptide_seq::
  c (::std::auto_ptr< c_type > x)
  {
    this->c_.set (x);
  }

  const peptide_seq::seq_type& peptide_seq::
  seq () const
  {
    return this->seq_.get ();
  }

  peptide_seq::seq_type& peptide_seq::
  seq ()
  {
    return this->seq_.get ();
  }

  void peptide_seq::
  seq (const seq_type& x)
  {
    this->seq_.set (x);
  }

  void peptide_seq::
  seq (::std::auto_ptr< seq_type > x)
  {
    this->seq_.set (x);
  }


  // psm_ids
  // 

  const psm_ids::psm_id_sequence& psm_ids::
  psm_id () const
  {
    return this->psm_id_;
  }

  psm_ids::psm_id_sequence& psm_ids::
  psm_id ()
  {
    return this->psm_id_;
  }

  void psm_ids::
  psm_id (const psm_id_sequence& s)
  {
    this->psm_id_ = s;
  }


  // psm
  // 

  const psm::svm_score_type& psm::
  svm_score () const
  {
    return this->svm_score_.get ();
  }

  psm::svm_score_type& psm::
  svm_score ()
  {
    return this->svm_score_.get ();
  }

  void psm::
  svm_score (const svm_score_type& x)
  {
    this->svm_score_.set (x);
  }

  const psm::q_value_type& psm::
  q_value () const
  {
    return this->q_value_.get ();
  }

  psm::q_value_type& psm::
  q_value ()
  {
    return this->q_value_.get ();
  }

  void psm::
  q_value (const q_value_type& x)
  {
    this->q_value_.set (x);
  }

  void psm::
  q_value (::std::auto_ptr< q_value_type > x)
  {
    this->q_value_.set (x);
  }

  const psm::pep_type& psm::
  pep () const
  {
    return this->pep_.get ();
  }

  psm::pep_type& psm::
  pep ()
  {
    return this->pep_.get ();
  }

  void psm::
  pep (const pep_type& x)
  {
    this->pep_.set (x);
  }

  void psm::
  pep (::std::auto_ptr< pep_type > x)
  {
    this->pep_.set (x);
  }

  const psm::exp_mass_optional& psm::
  exp_mass () const
  {
    return this->exp_mass_;
  }

  psm::exp_mass_optional& psm::
  exp_mass ()
  {
    return this->exp_mass_;
  }

  void psm::
  exp_mass (const exp_mass_type& x)
  {
    this->exp_mass_.set (x);
  }

  void psm::
  exp_mass (const exp_mass_optional& x)
  {
    this->exp_mass_ = x;
  }

  const psm::calc_mass_optional& psm::
  calc_mass () const
  {
    return this->calc_mass_;
  }

  psm::calc_mass_optional& psm::
  calc_mass ()
  {
    return this->calc_mass_;
  }

  void psm::
  calc_mass (const calc_mass_type& x)
  {
    this->calc_mass_.set (x);
  }

  void psm::
  calc_mass (const calc_mass_optional& x)
  {
    this->calc_mass_ = x;
  }

  const psm::retentionTime_optional& psm::
  retentionTime () const
  {
    return this->retentionTime_;
  }

  psm::retentionTime_optional& psm::
  retentionTime ()
  {
    return this->retentionTime_;
  }

  void psm::
  retentionTime (const retentionTime_type& x)
  {
    this->retentionTime_.set (x);
  }

  void psm::
  retentionTime (const retentionTime_optional& x)
  {
    this->retentionTime_ = x;
  }

  void psm::
  retentionTime (::std::auto_ptr< retentionTime_type > x)
  {
    this->retentionTime_.set (x);
  }

  const psm::peptide_seq_type& psm::
  peptide_seq () const
  {
    return this->peptide_seq_.get ();
  }

  psm::peptide_seq_type& psm::
  peptide_seq ()
  {
    return this->peptide_seq_.get ();
  }

  void psm::
  peptide_seq (const peptide_seq_type& x)
  {
    this->peptide_seq_.set (x);
  }

  void psm::
  peptide_seq (::std::auto_ptr< peptide_seq_type > x)
  {
    this->peptide_seq_.set (x);
  }

  const psm::protein_id_sequence& psm::
  protein_id () const
  {
    return this->protein_id_;
  }

  psm::protein_id_sequence& psm::
  protein_id ()
  {
    return this->protein_id_;
  }

  void psm::
  protein_id (const protein_id_sequence& s)
  {
    this->protein_id_ = s;
  }

  const psm::p_value_type& psm::
  p_value () const
  {
    return this->p_value_.get ();
  }

  psm::p_value_type& psm::
  p_value ()
  {
    return this->p_value_.get ();
  }

  void psm::
  p_value (const p_value_type& x)
  {
    this->p_value_.set (x);
  }

  void psm::
  p_value (::std::auto_ptr< p_value_type > x)
  {
    this->p_value_.set (x);
  }

  const psm::psm_id_type& psm::
  psm_id () const
  {
    return this->psm_id_.get ();
  }

  psm::psm_id_type& psm::
  psm_id ()
  {
    return this->psm_id_.get ();
  }

  void psm::
  psm_id (const psm_id_type& x)
  {
    this->psm_id_.set (x);
  }

  void psm::
  psm_id (::std::auto_ptr< psm_id_type > x)
  {
    this->psm_id_.set (x);
  }

  const psm::decoy_optional& psm::
  decoy () const
  {
    return this->decoy_;
  }

  psm::decoy_optional& psm::
  decoy ()
  {
    return this->decoy_;
  }

  void psm::
  decoy (const decoy_type& x)
  {
    this->decoy_.set (x);
  }

  void psm::
  decoy (const decoy_optional& x)
  {
    this->decoy_ = x;
  }


  // psms
  // 

  const psms::psm_sequence& psms::
  psm () const
  {
    return this->psm_;
  }

  psms::psm_sequence& psms::
  psm ()
  {
    return this->psm_;
  }

  void psms::
  psm (const psm_sequence& s)
  {
    this->psm_ = s;
  }


  // peptide
  // 

  const peptide::svm_score_type& peptide::
  svm_score () const
  {
    return this->svm_score_.get ();
  }

  peptide::svm_score_type& peptide::
  svm_score ()
  {
    return this->svm_score_.get ();
  }

  void peptide::
  svm_score (const svm_score_type& x)
  {
    this->svm_score_.set (x);
  }

  const peptide::q_value_type& peptide::
  q_value () const
  {
    return this->q_value_.get ();
  }

  peptide::q_value_type& peptide::
  q_value ()
  {
    return this->q_value_.get ();
  }

  void peptide::
  q_value (const q_value_type& x)
  {
    this->q_value_.set (x);
  }

  void peptide::
  q_value (::std::auto_ptr< q_value_type > x)
  {
    this->q_value_.set (x);
  }

  const peptide::pep_type& peptide::
  pep () const
  {
    return this->pep_.get ();
  }

  peptide::pep_type& peptide::
  pep ()
  {
    return this->pep_.get ();
  }

  void peptide::
  pep (const pep_type& x)
  {
    this->pep_.set (x);
  }

  void peptide::
  pep (::std::auto_ptr< pep_type > x)
  {
    this->pep_.set (x);
  }

  const peptide::exp_mass_optional& peptide::
  exp_mass () const
  {
    return this->exp_mass_;
  }

  peptide::exp_mass_optional& peptide::
  exp_mass ()
  {
    return this->exp_mass_;
  }

  void peptide::
  exp_mass (const exp_mass_type& x)
  {
    this->exp_mass_.set (x);
  }

  void peptide::
  exp_mass (const exp_mass_optional& x)
  {
    this->exp_mass_ = x;
  }

  const peptide::calc_mass_optional& peptide::
  calc_mass () const
  {
    return this->calc_mass_;
  }

  peptide::calc_mass_optional& peptide::
  calc_mass ()
  {
    return this->calc_mass_;
  }

  void peptide::
  calc_mass (const calc_mass_type& x)
  {
    this->calc_mass_.set (x);
  }

  void peptide::
  calc_mass (const calc_mass_optional& x)
  {
    this->calc_mass_ = x;
  }

  const peptide::retentionTime_optional& peptide::
  retentionTime () const
  {
    return this->retentionTime_;
  }

  peptide::retentionTime_optional& peptide::
  retentionTime ()
  {
    return this->retentionTime_;
  }

  void peptide::
  retentionTime (const retentionTime_type& x)
  {
    this->retentionTime_.set (x);
  }

  void peptide::
  retentionTime (const retentionTime_optional& x)
  {
    this->retentionTime_ = x;
  }

  void peptide::
  retentionTime (::std::auto_ptr< retentionTime_type > x)
  {
    this->retentionTime_.set (x);
  }

  const peptide::protein_id_sequence& peptide::
  protein_id () const
  {
    return this->protein_id_;
  }

  peptide::protein_id_sequence& peptide::
  protein_id ()
  {
    return this->protein_id_;
  }

  void peptide::
  protein_id (const protein_id_sequence& s)
  {
    this->protein_id_ = s;
  }

  const peptide::p_value_type& peptide::
  p_value () const
  {
    return this->p_value_.get ();
  }

  peptide::p_value_type& peptide::
  p_value ()
  {
    return this->p_value_.get ();
  }

  void peptide::
  p_value (const p_value_type& x)
  {
    this->p_value_.set (x);
  }

  void peptide::
  p_value (::std::auto_ptr< p_value_type > x)
  {
    this->p_value_.set (x);
  }

  const peptide::psm_ids_type& peptide::
  psm_ids () const
  {
    return this->psm_ids_.get ();
  }

  peptide::psm_ids_type& peptide::
  psm_ids ()
  {
    return this->psm_ids_.get ();
  }

  void peptide::
  psm_ids (const psm_ids_type& x)
  {
    this->psm_ids_.set (x);
  }

  void peptide::
  psm_ids (::std::auto_ptr< psm_ids_type > x)
  {
    this->psm_ids_.set (x);
  }

  const peptide::peptide_id_type& peptide::
  peptide_id () const
  {
    return this->peptide_id_.get ();
  }

  peptide::peptide_id_type& peptide::
  peptide_id ()
  {
    return this->peptide_id_.get ();
  }

  void peptide::
  peptide_id (const peptide_id_type& x)
  {
    this->peptide_id_.set (x);
  }

  void peptide::
  peptide_id (::std::auto_ptr< peptide_id_type > x)
  {
    this->peptide_id_.set (x);
  }

  const peptide::decoy_optional& peptide::
  decoy () const
  {
    return this->decoy_;
  }

  peptide::decoy_optional& peptide::
  decoy ()
  {
    return this->decoy_;
  }

  void peptide::
  decoy (const decoy_type& x)
  {
    this->decoy_.set (x);
  }

  void peptide::
  decoy (const decoy_optional& x)
  {
    this->decoy_ = x;
  }


  // peptides
  // 

  const peptides::peptide_sequence& peptides::
  peptide () const
  {
    return this->peptide_;
  }

  peptides::peptide_sequence& peptides::
  peptide ()
  {
    return this->peptide_;
  }

  void peptides::
  peptide (const peptide_sequence& s)
  {
    this->peptide_ = s;
  }


  // protein
  // 

  const protein::pep_optional& protein::
  pep () const
  {
    return this->pep_;
  }

  protein::pep_optional& protein::
  pep ()
  {
    return this->pep_;
  }

  void protein::
  pep (const pep_type& x)
  {
    this->pep_.set (x);
  }

  void protein::
  pep (const pep_optional& x)
  {
    this->pep_ = x;
  }

  void protein::
  pep (::std::auto_ptr< pep_type > x)
  {
    this->pep_.set (x);
  }

  const protein::q_value_type& protein::
  q_value () const
  {
    return this->q_value_.get ();
  }

  protein::q_value_type& protein::
  q_value ()
  {
    return this->q_value_.get ();
  }

  void protein::
  q_value (const q_value_type& x)
  {
    this->q_value_.set (x);
  }

  void protein::
  q_value (::std::auto_ptr< q_value_type > x)
  {
    this->q_value_.set (x);
  }

  const protein::peptide_seq_sequence& protein::
  peptide_seq () const
  {
    return this->peptide_seq_;
  }

  protein::peptide_seq_sequence& protein::
  peptide_seq ()
  {
    return this->peptide_seq_;
  }

  void protein::
  peptide_seq (const peptide_seq_sequence& s)
  {
    this->peptide_seq_ = s;
  }

  const protein::protein_id_type& protein::
  protein_id () const
  {
    return this->protein_id_.get ();
  }

  protein::protein_id_type& protein::
  protein_id ()
  {
    return this->protein_id_.get ();
  }

  void protein::
  protein_id (const protein_id_type& x)
  {
    this->protein_id_.set (x);
  }

  void protein::
  protein_id (::std::auto_ptr< protein_id_type > x)
  {
    this->protein_id_.set (x);
  }

  const protein::decoy_optional& protein::
  decoy () const
  {
    return this->decoy_;
  }

  protein::decoy_optional& protein::
  decoy ()
  {
    return this->decoy_;
  }

  void protein::
  decoy (const decoy_type& x)
  {
    this->decoy_.set (x);
  }

  void protein::
  decoy (const decoy_optional& x)
  {
    this->decoy_ = x;
  }


  // proteins
  // 

  const proteins::protein_sequence& proteins::
  protein () const
  {
    return this->protein_;
  }

  proteins::protein_sequence& proteins::
  protein ()
  {
    return this->protein_;
  }

  void proteins::
  protein (const protein_sequence& s)
  {
    this->protein_ = s;
  }


  // percolator_output
  // 

  const percolator_output::process_info_type& percolator_output::
  process_info () const
  {
    return this->process_info_.get ();
  }

  percolator_output::process_info_type& percolator_output::
  process_info ()
  {
    return this->process_info_.get ();
  }

  void percolator_output::
  process_info (const process_info_type& x)
  {
    this->process_info_.set (x);
  }

  void percolator_output::
  process_info (::std::auto_ptr< process_info_type > x)
  {
    this->process_info_.set (x);
  }

  const percolator_output::psms_type& percolator_output::
  psms () const
  {
    return this->psms_.get ();
  }

  percolator_output::psms_type& percolator_output::
  psms ()
  {
    return this->psms_.get ();
  }

  void percolator_output::
  psms (const psms_type& x)
  {
    this->psms_.set (x);
  }

  void percolator_output::
  psms (::std::auto_ptr< psms_type > x)
  {
    this->psms_.set (x);
  }

  const percolator_output::peptides_optional& percolator_output::
  peptides () const
  {
    return this->peptides_;
  }

  percolator_output::peptides_optional& percolator_output::
  peptides ()
  {
    return this->peptides_;
  }

  void percolator_output::
  peptides (const peptides_type& x)
  {
    this->peptides_.set (x);
  }

  void percolator_output::
  peptides (const peptides_optional& x)
  {
    this->peptides_ = x;
  }

  void percolator_output::
  peptides (::std::auto_ptr< peptides_type > x)
  {
    this->peptides_.set (x);
  }

  const percolator_output::proteins_optional& percolator_output::
  proteins () const
  {
    return this->proteins_;
  }

  percolator_output::proteins_optional& percolator_output::
  proteins ()
  {
    return this->proteins_;
  }

  void percolator_output::
  proteins (const proteins_type& x)
  {
    this->proteins_.set (x);
  }

  void percolator_output::
  proteins (const proteins_optional& x)
  {
    this->proteins_ = x;
  }

  void percolator_output::
  proteins (::std::auto_ptr< proteins_type > x)
  {
    this->proteins_.set (x);
  }

  const percolator_output::percolator_version_type& percolator_output::
  percolator_version () const
  {
    return this->percolator_version_.get ();
  }

  percolator_output::percolator_version_type& percolator_output::
  percolator_version ()
  {
    return this->percolator_version_.get ();
  }

  void percolator_output::
  percolator_version (const percolator_version_type& x)
  {
    this->percolator_version_.set (x);
  }

  void percolator_output::
  percolator_version (::std::auto_ptr< percolator_version_type > x)
  {
    this->percolator_version_.set (x);
  }

  const percolator_output::majorVersion_type& percolator_output::
  majorVersion () const
  {
    return this->majorVersion_.get ();
  }

  percolator_output::majorVersion_type percolator_output::
  majorVersion_default_value ()
  {
    return majorVersion_type (2);
  }

  const percolator_output::minorVersion_type& percolator_output::
  minorVersion () const
  {
    return this->minorVersion_.get ();
  }

  percolator_output::minorVersion_type& percolator_output::
  minorVersion ()
  {
    return this->minorVersion_.get ();
  }

  void percolator_output::
  minorVersion (const minorVersion_type& x)
  {
    this->minorVersion_.set (x);
  }


  // comment
  // 

  const comment::name_type& comment::
  name () const
  {
    return this->name_.get ();
  }

  comment::name_type& comment::
  name ()
  {
    return this->name_.get ();
  }

  void comment::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void comment::
  name (::std::auto_ptr< name_type > x)
  {
    this->name_.set (x);
  }

  const comment::value_type& comment::
  value () const
  {
    return this->value_.get ();
  }

  comment::value_type& comment::
  value ()
  {
    return this->value_.get ();
  }

  void comment::
  value (const value_type& x)
  {
    this->value_.set (x);
  }

  void comment::
  value (::std::auto_ptr< value_type > x)
  {
    this->value_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace percolatorOutNs
{
  // probability_t
  //

  probability_t::
  probability_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  probability_t::
  probability_t (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
  }

  probability_t::
  probability_t (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
  }

  probability_t* probability_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class probability_t (*this, f, c);
  }

  // aa_seq_t
  //

  aa_seq_t::
  aa_seq_t ()
  : ::xml_schema::string ()
  {
  }

  aa_seq_t::
  aa_seq_t (const char* _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  aa_seq_t::
  aa_seq_t (const ::std::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  aa_seq_t::
  aa_seq_t (const ::xml_schema::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  aa_seq_t::
  aa_seq_t (const aa_seq_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::string (x, f, c)
  {
  }

  aa_seq_t::
  aa_seq_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  aa_seq_t::
  aa_seq_t (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
  }

  aa_seq_t::
  aa_seq_t (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
  }

  aa_seq_t* aa_seq_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class aa_seq_t (*this, f, c);
  }

  aa_seq_t::
  ~aa_seq_t ()
  {
  }

  // aa_term_t
  //

  aa_term_t::
  aa_term_t ()
  : ::xml_schema::string ()
  {
  }

  aa_term_t::
  aa_term_t (const char* _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  aa_term_t::
  aa_term_t (const ::std::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  aa_term_t::
  aa_term_t (const ::xml_schema::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  aa_term_t::
  aa_term_t (const aa_term_t& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::string (x, f, c)
  {
  }

  aa_term_t::
  aa_term_t (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  aa_term_t::
  aa_term_t (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
  }

  aa_term_t::
  aa_term_t (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
  }

  aa_term_t* aa_term_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class aa_term_t (*this, f, c);
  }

  aa_term_t::
  ~aa_term_t ()
  {
  }

  // probability_t_member
  //

  probability_t_member::
  probability_t_member (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (e, f, c)
  {
  }

  probability_t_member::
  probability_t_member (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (a, f, c)
  {
  }

  probability_t_member::
  probability_t_member (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (s, e, f, c)
  {
  }

  probability_t_member* probability_t_member::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class probability_t_member (*this, f, c);
  }

  // probability_t_member1
  //

  probability_t_member1::
  probability_t_member1 (const ::xml_schema::double_& _xsd_double__base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (_xsd_double__base)
  {
  }

  probability_t_member1::
  probability_t_member1 (const probability_t_member1& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (x, f, c)
  {
  }

  probability_t_member1::
  probability_t_member1 (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (e, f, c)
  {
  }

  probability_t_member1::
  probability_t_member1 (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (a, f, c)
  {
  }

  probability_t_member1::
  probability_t_member1 (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (s, e, f, c)
  {
  }

  probability_t_member1* probability_t_member1::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class probability_t_member1 (*this, f, c);
  }

  probability_t_member1::
  ~probability_t_member1 ()
  {
  }

  // process_info
  //

  process_info::
  process_info (const command_line_type& command_line,
                const other_command_line_type& other_command_line)
  : ::xml_schema::type (),
    command_line_ (command_line, ::xml_schema::flags (), this),
    other_command_line_ (other_command_line, ::xml_schema::flags (), this),
    pi_0_psms_ (::xml_schema::flags (), this),
    pi_0_peptides_ (::xml_schema::flags (), this),
    pi_0_proteins_ (::xml_schema::flags (), this),
    average_delta_mass_ (::xml_schema::flags (), this),
    average_pi_ (::xml_schema::flags (), this),
    comment_ (::xml_schema::flags (), this)
  {
  }

  process_info::
  process_info (const process_info& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    command_line_ (x.command_line_, f, this),
    other_command_line_ (x.other_command_line_, f, this),
    pi_0_psms_ (x.pi_0_psms_, f, this),
    pi_0_peptides_ (x.pi_0_peptides_, f, this),
    pi_0_proteins_ (x.pi_0_proteins_, f, this),
    average_delta_mass_ (x.average_delta_mass_, f, this),
    average_pi_ (x.average_pi_, f, this),
    comment_ (x.comment_, f, this)
  {
  }

  process_info::
  process_info (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    command_line_ (f, this),
    other_command_line_ (f, this),
    pi_0_psms_ (f, this),
    pi_0_peptides_ (f, this),
    pi_0_proteins_ (f, this),
    average_delta_mass_ (f, this),
    average_pi_ (f, this),
    comment_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void process_info::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // command_line
      //
      if (n.name () == "command_line" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< command_line_type > r (
          command_line_traits::create (i, f, this));

        if (!command_line_.present ())
        {
          this->command_line_.set (r);
          continue;
        }
      }

      // other_command_line
      //
      if (n.name () == "other_command_line" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< other_command_line_type > r (
          other_command_line_traits::create (i, f, this));

        if (!other_command_line_.present ())
        {
          this->other_command_line_.set (r);
          continue;
        }
      }

      // pi_0_psms
      //
      if (n.name () == "pi_0_psms" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< pi_0_psms_type > r (
          pi_0_psms_traits::create (i, f, this));

        if (!this->pi_0_psms_)
        {
          this->pi_0_psms_.set (r);
          continue;
        }
      }

      // pi_0_peptides
      //
      if (n.name () == "pi_0_peptides" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< pi_0_peptides_type > r (
          pi_0_peptides_traits::create (i, f, this));

        if (!this->pi_0_peptides_)
        {
          this->pi_0_peptides_.set (r);
          continue;
        }
      }

      // pi_0_proteins
      //
      if (n.name () == "pi_0_proteins" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< pi_0_proteins_type > r (
          pi_0_proteins_traits::create (i, f, this));

        if (!this->pi_0_proteins_)
        {
          this->pi_0_proteins_.set (r);
          continue;
        }
      }

      // average_delta_mass
      //
      if (n.name () == "average_delta_mass" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        if (!this->average_delta_mass_)
        {
          this->average_delta_mass_.set (average_delta_mass_traits::create (i, f, this));
          continue;
        }
      }

      // average_pi
      //
      if (n.name () == "average_pi" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        if (!this->average_pi_)
        {
          this->average_pi_.set (average_pi_traits::create (i, f, this));
          continue;
        }
      }

      // comment
      //
      if (n.name () == "comment" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< comment_type > r (
          comment_traits::create (i, f, this));

        this->comment_.push_back (r);
        continue;
      }

      break;
    }

    if (!command_line_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "command_line",
        "http://per-colator.com/percolator_out/13");
    }

    if (!other_command_line_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "other_command_line",
        "http://per-colator.com/percolator_out/13");
    }
  }

  process_info* process_info::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class process_info (*this, f, c);
  }

  process_info::
  ~process_info ()
  {
  }

  // retentionTime
  //

  retentionTime::
  retentionTime ()
  : ::xml_schema::type (),
    predicted_ (::xml_schema::flags (), this),
    observed_ (::xml_schema::flags (), this)
  {
  }

  retentionTime::
  retentionTime (const retentionTime& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    predicted_ (x.predicted_, f, this),
    observed_ (x.observed_, f, this)
  {
  }

  retentionTime::
  retentionTime (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    predicted_ (f, this),
    observed_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void retentionTime::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "predicted" && n.namespace_ ().empty ())
      {
        this->predicted_.set (predicted_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "observed" && n.namespace_ ().empty ())
      {
        this->observed_.set (observed_traits::create (i, f, this));
        continue;
      }
    }
  }

  retentionTime* retentionTime::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class retentionTime (*this, f, c);
  }

  retentionTime::
  ~retentionTime ()
  {
  }

  // peptide_seq
  //

  peptide_seq::
  peptide_seq (const seq_type& seq)
  : ::xml_schema::type (),
    n_ (::xml_schema::flags (), this),
    c_ (::xml_schema::flags (), this),
    seq_ (seq, ::xml_schema::flags (), this)
  {
  }

  peptide_seq::
  peptide_seq (const peptide_seq& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    n_ (x.n_, f, this),
    c_ (x.c_, f, this),
    seq_ (x.seq_, f, this)
  {
  }

  peptide_seq::
  peptide_seq (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    n_ (f, this),
    c_ (f, this),
    seq_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void peptide_seq::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "n" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< n_type > r (
          n_traits::create (i, f, this));

        this->n_.set (r);
        continue;
      }

      if (n.name () == "c" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< c_type > r (
          c_traits::create (i, f, this));

        this->c_.set (r);
        continue;
      }

      if (n.name () == "seq" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< seq_type > r (
          seq_traits::create (i, f, this));

        this->seq_.set (r);
        continue;
      }
    }

    if (!seq_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "seq",
        "");
    }
  }

  peptide_seq* peptide_seq::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class peptide_seq (*this, f, c);
  }

  peptide_seq::
  ~peptide_seq ()
  {
  }

  // psm_ids
  //

  psm_ids::
  psm_ids ()
  : ::xml_schema::type (),
    psm_id_ (::xml_schema::flags (), this)
  {
  }

  psm_ids::
  psm_ids (const psm_ids& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    psm_id_ (x.psm_id_, f, this)
  {
  }

  psm_ids::
  psm_ids (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    psm_id_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void psm_ids::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // psm_id
      //
      if (n.name () == "psm_id" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< psm_id_type > r (
          psm_id_traits::create (i, f, this));

        this->psm_id_.push_back (r);
        continue;
      }

      break;
    }
  }

  psm_ids* psm_ids::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class psm_ids (*this, f, c);
  }

  psm_ids::
  ~psm_ids ()
  {
  }

  // psm
  //

  psm::
  psm (const svm_score_type& svm_score,
       const q_value_type& q_value,
       const pep_type& pep,
       const peptide_seq_type& peptide_seq,
       const p_value_type& p_value,
       const psm_id_type& psm_id)
  : ::xml_schema::type (),
    svm_score_ (svm_score, ::xml_schema::flags (), this),
    q_value_ (q_value, ::xml_schema::flags (), this),
    pep_ (pep, ::xml_schema::flags (), this),
    exp_mass_ (::xml_schema::flags (), this),
    calc_mass_ (::xml_schema::flags (), this),
    retentionTime_ (::xml_schema::flags (), this),
    peptide_seq_ (peptide_seq, ::xml_schema::flags (), this),
    protein_id_ (::xml_schema::flags (), this),
    p_value_ (p_value, ::xml_schema::flags (), this),
    psm_id_ (psm_id, ::xml_schema::flags (), this),
    decoy_ (::xml_schema::flags (), this)
  {
  }

  psm::
  psm (const svm_score_type& svm_score,
       const q_value_type& q_value,
       const pep_type& pep,
       ::std::auto_ptr< peptide_seq_type >& peptide_seq,
       const p_value_type& p_value,
       const psm_id_type& psm_id)
  : ::xml_schema::type (),
    svm_score_ (svm_score, ::xml_schema::flags (), this),
    q_value_ (q_value, ::xml_schema::flags (), this),
    pep_ (pep, ::xml_schema::flags (), this),
    exp_mass_ (::xml_schema::flags (), this),
    calc_mass_ (::xml_schema::flags (), this),
    retentionTime_ (::xml_schema::flags (), this),
    peptide_seq_ (peptide_seq, ::xml_schema::flags (), this),
    protein_id_ (::xml_schema::flags (), this),
    p_value_ (p_value, ::xml_schema::flags (), this),
    psm_id_ (psm_id, ::xml_schema::flags (), this),
    decoy_ (::xml_schema::flags (), this)
  {
  }

  psm::
  psm (const psm& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    svm_score_ (x.svm_score_, f, this),
    q_value_ (x.q_value_, f, this),
    pep_ (x.pep_, f, this),
    exp_mass_ (x.exp_mass_, f, this),
    calc_mass_ (x.calc_mass_, f, this),
    retentionTime_ (x.retentionTime_, f, this),
    peptide_seq_ (x.peptide_seq_, f, this),
    protein_id_ (x.protein_id_, f, this),
    p_value_ (x.p_value_, f, this),
    psm_id_ (x.psm_id_, f, this),
    decoy_ (x.decoy_, f, this)
  {
  }

  psm::
  psm (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    svm_score_ (f, this),
    q_value_ (f, this),
    pep_ (f, this),
    exp_mass_ (f, this),
    calc_mass_ (f, this),
    retentionTime_ (f, this),
    peptide_seq_ (f, this),
    protein_id_ (f, this),
    p_value_ (f, this),
    psm_id_ (f, this),
    decoy_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void psm::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // svm_score
      //
      if (n.name () == "svm_score" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        if (!svm_score_.present ())
        {
          this->svm_score_.set (svm_score_traits::create (i, f, this));
          continue;
        }
      }

      // q_value
      //
      if (n.name () == "q_value" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< q_value_type > r (
          q_value_traits::create (i, f, this));

        if (!q_value_.present ())
        {
          this->q_value_.set (r);
          continue;
        }
      }

      // pep
      //
      if (n.name () == "pep" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< pep_type > r (
          pep_traits::create (i, f, this));

        if (!pep_.present ())
        {
          this->pep_.set (r);
          continue;
        }
      }

      // exp_mass
      //
      if (n.name () == "exp_mass" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        if (!this->exp_mass_)
        {
          this->exp_mass_.set (exp_mass_traits::create (i, f, this));
          continue;
        }
      }

      // calc_mass
      //
      if (n.name () == "calc_mass" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        if (!this->calc_mass_)
        {
          this->calc_mass_.set (calc_mass_traits::create (i, f, this));
          continue;
        }
      }

      // retentionTime
      //
      if (n.name () == "retentionTime" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< retentionTime_type > r (
          retentionTime_traits::create (i, f, this));

        if (!this->retentionTime_)
        {
          this->retentionTime_.set (r);
          continue;
        }
      }

      // peptide_seq
      //
      if (n.name () == "peptide_seq" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< peptide_seq_type > r (
          peptide_seq_traits::create (i, f, this));

        if (!peptide_seq_.present ())
        {
          this->peptide_seq_.set (r);
          continue;
        }
      }

      // protein_id
      //
      if (n.name () == "protein_id" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< protein_id_type > r (
          protein_id_traits::create (i, f, this));

        this->protein_id_.push_back (r);
        continue;
      }

      // p_value
      //
      if (n.name () == "p_value" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< p_value_type > r (
          p_value_traits::create (i, f, this));

        if (!p_value_.present ())
        {
          this->p_value_.set (r);
          continue;
        }
      }

      break;
    }

    if (!svm_score_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "svm_score",
        "http://per-colator.com/percolator_out/13");
    }

    if (!q_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "q_value",
        "http://per-colator.com/percolator_out/13");
    }

    if (!pep_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "pep",
        "http://per-colator.com/percolator_out/13");
    }

    if (!peptide_seq_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "peptide_seq",
        "http://per-colator.com/percolator_out/13");
    }

    if (!p_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "p_value",
        "http://per-colator.com/percolator_out/13");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "psm_id" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< psm_id_type > r (
          psm_id_traits::create (i, f, this));

        this->psm_id_.set (r);
        continue;
      }

      if (n.name () == "decoy" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        this->decoy_.set (decoy_traits::create (i, f, this));
        continue;
      }
    }

    if (!psm_id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "psm_id",
        "http://per-colator.com/percolator_out/13");
    }
  }

  psm* psm::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class psm (*this, f, c);
  }

  psm::
  ~psm ()
  {
  }

  // psms
  //

  psms::
  psms ()
  : ::xml_schema::type (),
    psm_ (::xml_schema::flags (), this)
  {
  }

  psms::
  psms (const psms& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    psm_ (x.psm_, f, this)
  {
  }

  psms::
  psms (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    psm_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void psms::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // psm
      //
      if (n.name () == "psm" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< psm_type > r (
          psm_traits::create (i, f, this));

        this->psm_.push_back (r);
        continue;
      }

      break;
    }
  }

  psms* psms::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class psms (*this, f, c);
  }

  psms::
  ~psms ()
  {
  }

  // peptide
  //

  peptide::
  peptide (const svm_score_type& svm_score,
           const q_value_type& q_value,
           const pep_type& pep,
           const p_value_type& p_value,
           const psm_ids_type& psm_ids,
           const peptide_id_type& peptide_id)
  : ::xml_schema::type (),
    svm_score_ (svm_score, ::xml_schema::flags (), this),
    q_value_ (q_value, ::xml_schema::flags (), this),
    pep_ (pep, ::xml_schema::flags (), this),
    exp_mass_ (::xml_schema::flags (), this),
    calc_mass_ (::xml_schema::flags (), this),
    retentionTime_ (::xml_schema::flags (), this),
    protein_id_ (::xml_schema::flags (), this),
    p_value_ (p_value, ::xml_schema::flags (), this),
    psm_ids_ (psm_ids, ::xml_schema::flags (), this),
    peptide_id_ (peptide_id, ::xml_schema::flags (), this),
    decoy_ (::xml_schema::flags (), this)
  {
  }

  peptide::
  peptide (const svm_score_type& svm_score,
           const q_value_type& q_value,
           const pep_type& pep,
           const p_value_type& p_value,
           ::std::auto_ptr< psm_ids_type >& psm_ids,
           const peptide_id_type& peptide_id)
  : ::xml_schema::type (),
    svm_score_ (svm_score, ::xml_schema::flags (), this),
    q_value_ (q_value, ::xml_schema::flags (), this),
    pep_ (pep, ::xml_schema::flags (), this),
    exp_mass_ (::xml_schema::flags (), this),
    calc_mass_ (::xml_schema::flags (), this),
    retentionTime_ (::xml_schema::flags (), this),
    protein_id_ (::xml_schema::flags (), this),
    p_value_ (p_value, ::xml_schema::flags (), this),
    psm_ids_ (psm_ids, ::xml_schema::flags (), this),
    peptide_id_ (peptide_id, ::xml_schema::flags (), this),
    decoy_ (::xml_schema::flags (), this)
  {
  }

  peptide::
  peptide (const peptide& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    svm_score_ (x.svm_score_, f, this),
    q_value_ (x.q_value_, f, this),
    pep_ (x.pep_, f, this),
    exp_mass_ (x.exp_mass_, f, this),
    calc_mass_ (x.calc_mass_, f, this),
    retentionTime_ (x.retentionTime_, f, this),
    protein_id_ (x.protein_id_, f, this),
    p_value_ (x.p_value_, f, this),
    psm_ids_ (x.psm_ids_, f, this),
    peptide_id_ (x.peptide_id_, f, this),
    decoy_ (x.decoy_, f, this)
  {
  }

  peptide::
  peptide (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    svm_score_ (f, this),
    q_value_ (f, this),
    pep_ (f, this),
    exp_mass_ (f, this),
    calc_mass_ (f, this),
    retentionTime_ (f, this),
    protein_id_ (f, this),
    p_value_ (f, this),
    psm_ids_ (f, this),
    peptide_id_ (f, this),
    decoy_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void peptide::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // svm_score
      //
      if (n.name () == "svm_score" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        if (!svm_score_.present ())
        {
          this->svm_score_.set (svm_score_traits::create (i, f, this));
          continue;
        }
      }

      // q_value
      //
      if (n.name () == "q_value" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< q_value_type > r (
          q_value_traits::create (i, f, this));

        if (!q_value_.present ())
        {
          this->q_value_.set (r);
          continue;
        }
      }

      // pep
      //
      if (n.name () == "pep" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< pep_type > r (
          pep_traits::create (i, f, this));

        if (!pep_.present ())
        {
          this->pep_.set (r);
          continue;
        }
      }

      // exp_mass
      //
      if (n.name () == "exp_mass" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        if (!this->exp_mass_)
        {
          this->exp_mass_.set (exp_mass_traits::create (i, f, this));
          continue;
        }
      }

      // calc_mass
      //
      if (n.name () == "calc_mass" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        if (!this->calc_mass_)
        {
          this->calc_mass_.set (calc_mass_traits::create (i, f, this));
          continue;
        }
      }

      // retentionTime
      //
      if (n.name () == "retentionTime" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< retentionTime_type > r (
          retentionTime_traits::create (i, f, this));

        if (!this->retentionTime_)
        {
          this->retentionTime_.set (r);
          continue;
        }
      }

      // protein_id
      //
      if (n.name () == "protein_id" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< protein_id_type > r (
          protein_id_traits::create (i, f, this));

        this->protein_id_.push_back (r);
        continue;
      }

      // p_value
      //
      if (n.name () == "p_value" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< p_value_type > r (
          p_value_traits::create (i, f, this));

        if (!p_value_.present ())
        {
          this->p_value_.set (r);
          continue;
        }
      }

      // psm_ids
      //
      if (n.name () == "psm_ids" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< psm_ids_type > r (
          psm_ids_traits::create (i, f, this));

        if (!psm_ids_.present ())
        {
          this->psm_ids_.set (r);
          continue;
        }
      }

      break;
    }

    if (!svm_score_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "svm_score",
        "http://per-colator.com/percolator_out/13");
    }

    if (!q_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "q_value",
        "http://per-colator.com/percolator_out/13");
    }

    if (!pep_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "pep",
        "http://per-colator.com/percolator_out/13");
    }

    if (!p_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "p_value",
        "http://per-colator.com/percolator_out/13");
    }

    if (!psm_ids_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "psm_ids",
        "http://per-colator.com/percolator_out/13");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "peptide_id" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< peptide_id_type > r (
          peptide_id_traits::create (i, f, this));

        this->peptide_id_.set (r);
        continue;
      }

      if (n.name () == "decoy" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        this->decoy_.set (decoy_traits::create (i, f, this));
        continue;
      }
    }

    if (!peptide_id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "peptide_id",
        "http://per-colator.com/percolator_out/13");
    }
  }

  peptide* peptide::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class peptide (*this, f, c);
  }

  peptide::
  ~peptide ()
  {
  }

  // peptides
  //

  peptides::
  peptides ()
  : ::xml_schema::type (),
    peptide_ (::xml_schema::flags (), this)
  {
  }

  peptides::
  peptides (const peptides& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    peptide_ (x.peptide_, f, this)
  {
  }

  peptides::
  peptides (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    peptide_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void peptides::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // peptide
      //
      if (n.name () == "peptide" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< peptide_type > r (
          peptide_traits::create (i, f, this));

        this->peptide_.push_back (r);
        continue;
      }

      break;
    }
  }

  peptides* peptides::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class peptides (*this, f, c);
  }

  peptides::
  ~peptides ()
  {
  }

  // protein
  //

  protein::
  protein (const q_value_type& q_value,
           const protein_id_type& protein_id)
  : ::xml_schema::type (),
    pep_ (::xml_schema::flags (), this),
    q_value_ (q_value, ::xml_schema::flags (), this),
    peptide_seq_ (::xml_schema::flags (), this),
    protein_id_ (protein_id, ::xml_schema::flags (), this),
    decoy_ (::xml_schema::flags (), this)
  {
  }

  protein::
  protein (const protein& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    pep_ (x.pep_, f, this),
    q_value_ (x.q_value_, f, this),
    peptide_seq_ (x.peptide_seq_, f, this),
    protein_id_ (x.protein_id_, f, this),
    decoy_ (x.decoy_, f, this)
  {
  }

  protein::
  protein (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    pep_ (f, this),
    q_value_ (f, this),
    peptide_seq_ (f, this),
    protein_id_ (f, this),
    decoy_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void protein::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // pep
      //
      if (n.name () == "pep" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< pep_type > r (
          pep_traits::create (i, f, this));

        if (!this->pep_)
        {
          this->pep_.set (r);
          continue;
        }
      }

      // q_value
      //
      if (n.name () == "q_value" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< q_value_type > r (
          q_value_traits::create (i, f, this));

        if (!q_value_.present ())
        {
          this->q_value_.set (r);
          continue;
        }
      }

      // peptide_seq
      //
      if (n.name () == "peptide_seq" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< peptide_seq_type > r (
          peptide_seq_traits::create (i, f, this));

        this->peptide_seq_.push_back (r);
        continue;
      }

      break;
    }

    if (!q_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "q_value",
        "http://per-colator.com/percolator_out/13");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "protein_id" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< protein_id_type > r (
          protein_id_traits::create (i, f, this));

        this->protein_id_.set (r);
        continue;
      }

      if (n.name () == "decoy" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        this->decoy_.set (decoy_traits::create (i, f, this));
        continue;
      }
    }

    if (!protein_id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "protein_id",
        "http://per-colator.com/percolator_out/13");
    }
  }

  protein* protein::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class protein (*this, f, c);
  }

  protein::
  ~protein ()
  {
  }

  // proteins
  //

  proteins::
  proteins ()
  : ::xml_schema::type (),
    protein_ (::xml_schema::flags (), this)
  {
  }

  proteins::
  proteins (const proteins& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    protein_ (x.protein_, f, this)
  {
  }

  proteins::
  proteins (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    protein_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void proteins::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // protein
      //
      if (n.name () == "protein" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< protein_type > r (
          protein_traits::create (i, f, this));

        this->protein_.push_back (r);
        continue;
      }

      break;
    }
  }

  proteins* proteins::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class proteins (*this, f, c);
  }

  proteins::
  ~proteins ()
  {
  }

  // percolator_output
  //

  percolator_output::
  percolator_output (const process_info_type& process_info,
                     const psms_type& psms,
                     const percolator_version_type& percolator_version,
                     const minorVersion_type& minorVersion)
  : ::xml_schema::type (),
    process_info_ (process_info, ::xml_schema::flags (), this),
    psms_ (psms, ::xml_schema::flags (), this),
    peptides_ (::xml_schema::flags (), this),
    proteins_ (::xml_schema::flags (), this),
    percolator_version_ (percolator_version, ::xml_schema::flags (), this),
    majorVersion_ (majorVersion_default_value (), ::xml_schema::flags (), this),
    minorVersion_ (minorVersion, ::xml_schema::flags (), this)
  {
  }

  percolator_output::
  percolator_output (::std::auto_ptr< process_info_type >& process_info,
                     ::std::auto_ptr< psms_type >& psms,
                     const percolator_version_type& percolator_version,
                     const minorVersion_type& minorVersion)
  : ::xml_schema::type (),
    process_info_ (process_info, ::xml_schema::flags (), this),
    psms_ (psms, ::xml_schema::flags (), this),
    peptides_ (::xml_schema::flags (), this),
    proteins_ (::xml_schema::flags (), this),
    percolator_version_ (percolator_version, ::xml_schema::flags (), this),
    majorVersion_ (majorVersion_default_value (), ::xml_schema::flags (), this),
    minorVersion_ (minorVersion, ::xml_schema::flags (), this)
  {
  }

  percolator_output::
  percolator_output (const percolator_output& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    process_info_ (x.process_info_, f, this),
    psms_ (x.psms_, f, this),
    peptides_ (x.peptides_, f, this),
    proteins_ (x.proteins_, f, this),
    percolator_version_ (x.percolator_version_, f, this),
    majorVersion_ (x.majorVersion_, f, this),
    minorVersion_ (x.minorVersion_, f, this)
  {
  }

  percolator_output::
  percolator_output (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    process_info_ (f, this),
    psms_ (f, this),
    peptides_ (f, this),
    proteins_ (f, this),
    percolator_version_ (f, this),
    majorVersion_ (f, this),
    minorVersion_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void percolator_output::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // process_info
      //
      if (n.name () == "process_info" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< process_info_type > r (
          process_info_traits::create (i, f, this));

        if (!process_info_.present ())
        {
          this->process_info_.set (r);
          continue;
        }
      }

      // psms
      //
      if (n.name () == "psms" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< psms_type > r (
          psms_traits::create (i, f, this));

        if (!psms_.present ())
        {
          this->psms_.set (r);
          continue;
        }
      }

      // peptides
      //
      if (n.name () == "peptides" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< peptides_type > r (
          peptides_traits::create (i, f, this));

        if (!this->peptides_)
        {
          this->peptides_.set (r);
          continue;
        }
      }

      // proteins
      //
      if (n.name () == "proteins" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< proteins_type > r (
          proteins_traits::create (i, f, this));

        if (!this->proteins_)
        {
          this->proteins_.set (r);
          continue;
        }
      }

      break;
    }

    if (!process_info_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "process_info",
        "http://per-colator.com/percolator_out/13");
    }

    if (!psms_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "psms",
        "http://per-colator.com/percolator_out/13");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "percolator_version" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        ::std::auto_ptr< percolator_version_type > r (
          percolator_version_traits::create (i, f, this));

        this->percolator_version_.set (r);
        continue;
      }

      if (n.name () == "majorVersion" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        this->majorVersion_.set (majorVersion_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "minorVersion" && n.namespace_ () == "http://per-colator.com/percolator_out/13")
      {
        this->minorVersion_.set (minorVersion_traits::create (i, f, this));
        continue;
      }
    }

    if (!percolator_version_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "percolator_version",
        "http://per-colator.com/percolator_out/13");
    }

    if (!majorVersion_.present ())
    {
      this->majorVersion_.set (majorVersion_default_value ());
    }

    if (!minorVersion_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "minorVersion",
        "http://per-colator.com/percolator_out/13");
    }
  }

  percolator_output* percolator_output::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class percolator_output (*this, f, c);
  }

  percolator_output::
  ~percolator_output ()
  {
  }

  // comment
  //

  comment::
  comment (const name_type& name,
           const value_type& value)
  : ::xml_schema::type (),
    name_ (name, ::xml_schema::flags (), this),
    value_ (value, ::xml_schema::flags (), this)
  {
  }

  comment::
  comment (const comment& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    name_ (x.name_, f, this),
    value_ (x.value_, f, this)
  {
  }

  comment::
  comment (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    name_ (f, this),
    value_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void comment::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< name_type > r (
          name_traits::create (i, f, this));

        this->name_.set (r);
        continue;
      }

      if (n.name () == "value" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< value_type > r (
          value_traits::create (i, f, this));

        this->value_.set (r);
        continue;
      }
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "name",
        "");
    }

    if (!value_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "value",
        "");
    }
  }

  comment* comment::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class comment (*this, f, c);
  }

  comment::
  ~comment ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace percolatorOutNs
{
  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::process_info > r (
      ::percolatorOutNs::process_info_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::process_info > r (
      ::percolatorOutNs::process_info_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::process_info > r (
      ::percolatorOutNs::process_info_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::process_info_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::process_info_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::process_info_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::process_info_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::process_info_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::process_info_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::process_info > r (
      ::percolatorOutNs::process_info_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::process_info > r (
      ::percolatorOutNs::process_info_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::process_info > r (
      ::percolatorOutNs::process_info_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::percolatorOutNs::process_info > r (
        ::percolatorOutNs::process_info_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "process_info" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::process_info > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::process_info, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "process_info",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::process_info >
  process_info_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "process_info" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::process_info > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::process_info, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "process_info",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::percolatorOutNs::svm_score (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::percolatorOutNs::svm_score (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::percolatorOutNs::svm_score (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::svm_score (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::svm_score (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::svm_score (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::svm_score (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::svm_score (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::svm_score (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::percolatorOutNs::svm_score (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::percolatorOutNs::svm_score (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::percolatorOutNs::svm_score (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::double_ > r (
        ::percolatorOutNs::svm_score (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "svm_score" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::xml_schema::double_ > r (
        new ::xml_schema::double_ (
          ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
            e, f, 0)));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "svm_score",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  svm_score (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "svm_score" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::xml_schema::double_ > r (
        new ::xml_schema::double_ (
          ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
            e, f, 0)));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "svm_score",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
      ::percolatorOutNs::q_value (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
      ::percolatorOutNs::q_value (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
      ::percolatorOutNs::q_value (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::q_value (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::q_value (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::q_value (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::q_value (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::q_value (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::q_value (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
      ::percolatorOutNs::q_value (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
      ::percolatorOutNs::q_value (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
      ::percolatorOutNs::q_value (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
        ::percolatorOutNs::q_value (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "q_value" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::probability_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "q_value",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  q_value (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "q_value" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::probability_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "q_value",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (const ::std::string& u,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
      ::percolatorOutNs::pep (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (const ::std::string& u,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
      ::percolatorOutNs::pep (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (const ::std::string& u,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
      ::percolatorOutNs::pep (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (::std::istream& is,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::pep (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (::std::istream& is,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::pep (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (::std::istream& is,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::pep (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::pep (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::pep (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (::std::istream& is,
       const ::std::string& sid,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::pep (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (::xercesc::InputSource& i,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
      ::percolatorOutNs::pep (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (::xercesc::InputSource& i,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
      ::percolatorOutNs::pep (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (::xercesc::InputSource& i,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
      ::percolatorOutNs::pep (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
        ::percolatorOutNs::pep (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "pep" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::probability_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "pep",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  pep (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "pep" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::probability_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "pep",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::percolatorOutNs::exp_mass (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::percolatorOutNs::exp_mass (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::percolatorOutNs::exp_mass (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::exp_mass (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::exp_mass (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::exp_mass (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::exp_mass (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::exp_mass (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::exp_mass (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::percolatorOutNs::exp_mass (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::percolatorOutNs::exp_mass (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::percolatorOutNs::exp_mass (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::double_ > r (
        ::percolatorOutNs::exp_mass (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "exp_mass" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::xml_schema::double_ > r (
        new ::xml_schema::double_ (
          ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
            e, f, 0)));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "exp_mass",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  exp_mass (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "exp_mass" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::xml_schema::double_ > r (
        new ::xml_schema::double_ (
          ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
            e, f, 0)));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "exp_mass",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::percolatorOutNs::calc_mass (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::percolatorOutNs::calc_mass (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::percolatorOutNs::calc_mass (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::calc_mass (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::calc_mass (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::calc_mass (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::calc_mass (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::calc_mass (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::calc_mass (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::percolatorOutNs::calc_mass (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::percolatorOutNs::calc_mass (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::percolatorOutNs::calc_mass (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::double_ > r (
        ::percolatorOutNs::calc_mass (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "calc_mass" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::xml_schema::double_ > r (
        new ::xml_schema::double_ (
          ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
            e, f, 0)));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "calc_mass",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  calc_mass (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "calc_mass" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::xml_schema::double_ > r (
        new ::xml_schema::double_ (
          ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
            e, f, 0)));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "calc_mass",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::retentionTime > r (
      ::percolatorOutNs::retentionTime_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::retentionTime > r (
      ::percolatorOutNs::retentionTime_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::retentionTime > r (
      ::percolatorOutNs::retentionTime_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::retentionTime_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::retentionTime_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::retentionTime_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::retentionTime_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::retentionTime_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::retentionTime_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::retentionTime > r (
      ::percolatorOutNs::retentionTime_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::retentionTime > r (
      ::percolatorOutNs::retentionTime_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::retentionTime > r (
      ::percolatorOutNs::retentionTime_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::percolatorOutNs::retentionTime > r (
        ::percolatorOutNs::retentionTime_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "retentionTime" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::retentionTime > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::retentionTime, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "retentionTime",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::retentionTime >
  retentionTime_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "retentionTime" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::retentionTime > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::retentionTime, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "retentionTime",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::peptide_seq > r (
      ::percolatorOutNs::peptide_seq_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::peptide_seq > r (
      ::percolatorOutNs::peptide_seq_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::peptide_seq > r (
      ::percolatorOutNs::peptide_seq_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::peptide_seq_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::peptide_seq_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::peptide_seq_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::peptide_seq_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::peptide_seq_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::peptide_seq_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::peptide_seq > r (
      ::percolatorOutNs::peptide_seq_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::peptide_seq > r (
      ::percolatorOutNs::peptide_seq_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::peptide_seq > r (
      ::percolatorOutNs::peptide_seq_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::percolatorOutNs::peptide_seq > r (
        ::percolatorOutNs::peptide_seq_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "peptide_seq" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::peptide_seq > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::peptide_seq, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "peptide_seq",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide_seq >
  peptide_seq_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "peptide_seq" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::peptide_seq > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::peptide_seq, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "peptide_seq",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::percolatorOutNs::protein_id (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::percolatorOutNs::protein_id (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::percolatorOutNs::protein_id (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::protein_id (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::protein_id (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::protein_id (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::protein_id (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::protein_id (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::protein_id (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::percolatorOutNs::protein_id (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::percolatorOutNs::protein_id (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::percolatorOutNs::protein_id (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::percolatorOutNs::protein_id (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "protein_id" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "protein_id",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::xml_schema::string >
  protein_id (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "protein_id" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "protein_id",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::psm_ids > r (
      ::percolatorOutNs::psm_ids_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::psm_ids > r (
      ::percolatorOutNs::psm_ids_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::psm_ids > r (
      ::percolatorOutNs::psm_ids_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::psm_ids_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::psm_ids_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::psm_ids_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::psm_ids_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::psm_ids_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::psm_ids_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::psm_ids > r (
      ::percolatorOutNs::psm_ids_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::psm_ids > r (
      ::percolatorOutNs::psm_ids_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::psm_ids > r (
      ::percolatorOutNs::psm_ids_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::percolatorOutNs::psm_ids > r (
        ::percolatorOutNs::psm_ids_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "psm_ids" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::psm_ids > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::psm_ids, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "psm_ids",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::psm_ids >
  psm_ids_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "psm_ids" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::psm_ids > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::psm_ids, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "psm_ids",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
      ::percolatorOutNs::p_value (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
      ::percolatorOutNs::p_value (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
      ::percolatorOutNs::p_value (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::p_value (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::p_value (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::p_value (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::p_value (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::p_value (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::p_value (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
      ::percolatorOutNs::p_value (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
      ::percolatorOutNs::p_value (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
      ::percolatorOutNs::p_value (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
        ::percolatorOutNs::p_value (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "p_value" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::probability_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "p_value",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::probability_t >
  p_value (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "p_value" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::probability_t > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::probability_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "p_value",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::psm > r (
      ::percolatorOutNs::psm_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::psm > r (
      ::percolatorOutNs::psm_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::psm > r (
      ::percolatorOutNs::psm_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::psm_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::psm_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::psm_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::psm_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::psm_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::psm_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (::xercesc::InputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::psm > r (
      ::percolatorOutNs::psm_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (::xercesc::InputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::psm > r (
      ::percolatorOutNs::psm_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::psm > r (
      ::percolatorOutNs::psm_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::percolatorOutNs::psm > r (
        ::percolatorOutNs::psm_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "psm" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::psm > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::psm, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "psm",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::psm >
  psm_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "psm" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::psm > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::psm, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "psm",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::psms > r (
      ::percolatorOutNs::psms_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::psms > r (
      ::percolatorOutNs::psms_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::psms > r (
      ::percolatorOutNs::psms_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::psms_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::psms_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::psms_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::psms_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::psms_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::psms_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::psms > r (
      ::percolatorOutNs::psms_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::psms > r (
      ::percolatorOutNs::psms_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::psms > r (
      ::percolatorOutNs::psms_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::percolatorOutNs::psms > r (
        ::percolatorOutNs::psms_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "psms" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::psms > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::psms, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "psms",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::psms >
  psms_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "psms" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::psms > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::psms, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "psms",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::peptide > r (
      ::percolatorOutNs::peptide_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::peptide > r (
      ::percolatorOutNs::peptide_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::peptide > r (
      ::percolatorOutNs::peptide_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::peptide_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::peptide_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::peptide_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::peptide_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::peptide_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::peptide_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::peptide > r (
      ::percolatorOutNs::peptide_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::peptide > r (
      ::percolatorOutNs::peptide_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::peptide > r (
      ::percolatorOutNs::peptide_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::percolatorOutNs::peptide > r (
        ::percolatorOutNs::peptide_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "peptide" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::peptide > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::peptide, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "peptide",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::peptide >
  peptide_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "peptide" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::peptide > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::peptide, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "peptide",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::peptides > r (
      ::percolatorOutNs::peptides_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::peptides > r (
      ::percolatorOutNs::peptides_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::peptides > r (
      ::percolatorOutNs::peptides_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::peptides_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::peptides_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::peptides_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::peptides_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::peptides_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::peptides_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::peptides > r (
      ::percolatorOutNs::peptides_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::peptides > r (
      ::percolatorOutNs::peptides_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::peptides > r (
      ::percolatorOutNs::peptides_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::percolatorOutNs::peptides > r (
        ::percolatorOutNs::peptides_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "peptides" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::peptides > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::peptides, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "peptides",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::peptides >
  peptides_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "peptides" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::peptides > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::peptides, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "peptides",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::protein > r (
      ::percolatorOutNs::protein_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::protein > r (
      ::percolatorOutNs::protein_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::protein > r (
      ::percolatorOutNs::protein_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::protein_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::protein_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::protein_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::protein_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::protein_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::protein_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::protein > r (
      ::percolatorOutNs::protein_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::protein > r (
      ::percolatorOutNs::protein_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::protein > r (
      ::percolatorOutNs::protein_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::percolatorOutNs::protein > r (
        ::percolatorOutNs::protein_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "protein" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::protein > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::protein, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "protein",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::protein >
  protein_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "protein" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::protein > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::protein, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "protein",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::proteins > r (
      ::percolatorOutNs::proteins_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::proteins > r (
      ::percolatorOutNs::proteins_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::proteins > r (
      ::percolatorOutNs::proteins_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::proteins_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::proteins_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::proteins_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::proteins_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::proteins_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::proteins_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::proteins > r (
      ::percolatorOutNs::proteins_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::proteins > r (
      ::percolatorOutNs::proteins_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::proteins > r (
      ::percolatorOutNs::proteins_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::percolatorOutNs::proteins > r (
        ::percolatorOutNs::proteins_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "proteins" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::proteins > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::proteins, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "proteins",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::proteins >
  proteins_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "proteins" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::proteins > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::proteins, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "proteins",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::percolator_output > r (
      ::percolatorOutNs::percolator_output_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::percolator_output > r (
      ::percolatorOutNs::percolator_output_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::percolator_output > r (
      ::percolatorOutNs::percolator_output_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::percolator_output_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::percolator_output_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::percolatorOutNs::percolator_output_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::percolator_output_ (isrc, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::percolator_output_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::percolatorOutNs::percolator_output_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::percolatorOutNs::percolator_output > r (
      ::percolatorOutNs::percolator_output_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::percolator_output > r (
      ::percolatorOutNs::percolator_output_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::percolatorOutNs::percolator_output > r (
      ::percolatorOutNs::percolator_output_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::percolatorOutNs::percolator_output > r (
        ::percolatorOutNs::percolator_output_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "percolator_output" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::percolator_output > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::percolator_output, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "percolator_output",
      "http://per-colator.com/percolator_out/13");
  }

  ::std::auto_ptr< ::percolatorOutNs::percolator_output >
  percolator_output_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "percolator_output" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      ::std::auto_ptr< ::percolatorOutNs::percolator_output > r (
        ::xsd::cxx::tree::traits< ::percolatorOutNs::percolator_output, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "percolator_output",
      "http://per-colator.com/percolator_out/13");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace percolatorOutNs
{
  void
  operator<< (::xercesc::DOMElement& e, const probability_t& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const probability_t& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const probability_t& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const aa_seq_t& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const aa_seq_t& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const aa_seq_t& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const aa_term_t& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const aa_term_t& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const aa_term_t& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  void
  process_info_ (::std::ostream& o,
                 const ::percolatorOutNs::process_info& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::process_info_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  process_info_ (::std::ostream& o,
                 const ::percolatorOutNs::process_info& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::process_info_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  process_info_ (::std::ostream& o,
                 const ::percolatorOutNs::process_info& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::process_info_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  process_info_ (::xercesc::XMLFormatTarget& t,
                 const ::percolatorOutNs::process_info& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::process_info_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  process_info_ (::xercesc::XMLFormatTarget& t,
                 const ::percolatorOutNs::process_info& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::process_info_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  process_info_ (::xercesc::XMLFormatTarget& t,
                 const ::percolatorOutNs::process_info& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::process_info_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  process_info_ (::xercesc::DOMDocument& d,
                 const ::percolatorOutNs::process_info& s,
                 ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "process_info" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "process_info",
        "http://per-colator.com/percolator_out/13");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  process_info_ (const ::percolatorOutNs::process_info& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "process_info",
        "http://per-colator.com/percolator_out/13",
        m, f));

    ::percolatorOutNs::process_info_ (*d, s, f);
    return d;
  }

  void
  svm_score (::std::ostream& o,
             const ::xml_schema::double_& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::svm_score (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  svm_score (::std::ostream& o,
             const ::xml_schema::double_& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::svm_score (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  svm_score (::std::ostream& o,
             const ::xml_schema::double_& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::svm_score (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  svm_score (::xercesc::XMLFormatTarget& t,
             const ::xml_schema::double_& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::svm_score (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  svm_score (::xercesc::XMLFormatTarget& t,
             const ::xml_schema::double_& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::svm_score (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  svm_score (::xercesc::XMLFormatTarget& t,
             const ::xml_schema::double_& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::svm_score (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  svm_score (::xercesc::DOMDocument& d,
             const ::xml_schema::double_& s,
             ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "svm_score" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      e << ::xml_schema::as_double(s);
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "svm_score",
        "http://per-colator.com/percolator_out/13");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  svm_score (const ::xml_schema::double_& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "svm_score",
        "http://per-colator.com/percolator_out/13",
        m, f));

    ::percolatorOutNs::svm_score (*d, s, f);
    return d;
  }

  void
  q_value (::std::ostream& o,
           const ::percolatorOutNs::probability_t& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::q_value (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  q_value (::std::ostream& o,
           const ::percolatorOutNs::probability_t& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::q_value (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  q_value (::std::ostream& o,
           const ::percolatorOutNs::probability_t& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::q_value (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  q_value (::xercesc::XMLFormatTarget& t,
           const ::percolatorOutNs::probability_t& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::q_value (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  q_value (::xercesc::XMLFormatTarget& t,
           const ::percolatorOutNs::probability_t& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::q_value (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  q_value (::xercesc::XMLFormatTarget& t,
           const ::percolatorOutNs::probability_t& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::q_value (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  q_value (::xercesc::DOMDocument& d,
           const ::percolatorOutNs::probability_t& s,
           ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "q_value" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "q_value",
        "http://per-colator.com/percolator_out/13");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  q_value (const ::percolatorOutNs::probability_t& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "q_value",
        "http://per-colator.com/percolator_out/13",
        m, f));

    ::percolatorOutNs::q_value (*d, s, f);
    return d;
  }

  void
  pep (::std::ostream& o,
       const ::percolatorOutNs::probability_t& s,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::pep (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  pep (::std::ostream& o,
       const ::percolatorOutNs::probability_t& s,
       ::xml_schema::error_handler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::pep (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  pep (::std::ostream& o,
       const ::percolatorOutNs::probability_t& s,
       ::xercesc::DOMErrorHandler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::pep (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  pep (::xercesc::XMLFormatTarget& t,
       const ::percolatorOutNs::probability_t& s,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::pep (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  pep (::xercesc::XMLFormatTarget& t,
       const ::percolatorOutNs::probability_t& s,
       ::xml_schema::error_handler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::pep (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  pep (::xercesc::XMLFormatTarget& t,
       const ::percolatorOutNs::probability_t& s,
       ::xercesc::DOMErrorHandler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::pep (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  pep (::xercesc::DOMDocument& d,
       const ::percolatorOutNs::probability_t& s,
       ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "pep" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "pep",
        "http://per-colator.com/percolator_out/13");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  pep (const ::percolatorOutNs::probability_t& s,
       const ::xml_schema::namespace_infomap& m,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "pep",
        "http://per-colator.com/percolator_out/13",
        m, f));

    ::percolatorOutNs::pep (*d, s, f);
    return d;
  }

  void
  exp_mass (::std::ostream& o,
            const ::xml_schema::double_& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::exp_mass (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  exp_mass (::std::ostream& o,
            const ::xml_schema::double_& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::exp_mass (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  exp_mass (::std::ostream& o,
            const ::xml_schema::double_& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::exp_mass (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  exp_mass (::xercesc::XMLFormatTarget& t,
            const ::xml_schema::double_& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::exp_mass (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  exp_mass (::xercesc::XMLFormatTarget& t,
            const ::xml_schema::double_& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::exp_mass (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  exp_mass (::xercesc::XMLFormatTarget& t,
            const ::xml_schema::double_& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::exp_mass (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  exp_mass (::xercesc::DOMDocument& d,
            const ::xml_schema::double_& s,
            ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "exp_mass" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      e << ::xml_schema::as_double(s);
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "exp_mass",
        "http://per-colator.com/percolator_out/13");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  exp_mass (const ::xml_schema::double_& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "exp_mass",
        "http://per-colator.com/percolator_out/13",
        m, f));

    ::percolatorOutNs::exp_mass (*d, s, f);
    return d;
  }

  void
  calc_mass (::std::ostream& o,
             const ::xml_schema::double_& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::calc_mass (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  calc_mass (::std::ostream& o,
             const ::xml_schema::double_& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::calc_mass (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  calc_mass (::std::ostream& o,
             const ::xml_schema::double_& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::calc_mass (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  calc_mass (::xercesc::XMLFormatTarget& t,
             const ::xml_schema::double_& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::calc_mass (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  calc_mass (::xercesc::XMLFormatTarget& t,
             const ::xml_schema::double_& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::calc_mass (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  calc_mass (::xercesc::XMLFormatTarget& t,
             const ::xml_schema::double_& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::calc_mass (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  calc_mass (::xercesc::DOMDocument& d,
             const ::xml_schema::double_& s,
             ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "calc_mass" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      e << ::xml_schema::as_double(s);
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "calc_mass",
        "http://per-colator.com/percolator_out/13");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  calc_mass (const ::xml_schema::double_& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "calc_mass",
        "http://per-colator.com/percolator_out/13",
        m, f));

    ::percolatorOutNs::calc_mass (*d, s, f);
    return d;
  }

  void
  retentionTime_ (::std::ostream& o,
                  const ::percolatorOutNs::retentionTime& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::retentionTime_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  retentionTime_ (::std::ostream& o,
                  const ::percolatorOutNs::retentionTime& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::retentionTime_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  retentionTime_ (::std::ostream& o,
                  const ::percolatorOutNs::retentionTime& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::retentionTime_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  retentionTime_ (::xercesc::XMLFormatTarget& t,
                  const ::percolatorOutNs::retentionTime& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::retentionTime_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  retentionTime_ (::xercesc::XMLFormatTarget& t,
                  const ::percolatorOutNs::retentionTime& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::retentionTime_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  retentionTime_ (::xercesc::XMLFormatTarget& t,
                  const ::percolatorOutNs::retentionTime& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::retentionTime_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  retentionTime_ (::xercesc::DOMDocument& d,
                  const ::percolatorOutNs::retentionTime& s,
                  ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "retentionTime" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "retentionTime",
        "http://per-colator.com/percolator_out/13");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  retentionTime_ (const ::percolatorOutNs::retentionTime& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "retentionTime",
        "http://per-colator.com/percolator_out/13",
        m, f));

    ::percolatorOutNs::retentionTime_ (*d, s, f);
    return d;
  }

  void
  peptide_seq_ (::std::ostream& o,
                const ::percolatorOutNs::peptide_seq& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::peptide_seq_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  peptide_seq_ (::std::ostream& o,
                const ::percolatorOutNs::peptide_seq& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::peptide_seq_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  peptide_seq_ (::std::ostream& o,
                const ::percolatorOutNs::peptide_seq& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::peptide_seq_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  peptide_seq_ (::xercesc::XMLFormatTarget& t,
                const ::percolatorOutNs::peptide_seq& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::peptide_seq_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  peptide_seq_ (::xercesc::XMLFormatTarget& t,
                const ::percolatorOutNs::peptide_seq& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::peptide_seq_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  peptide_seq_ (::xercesc::XMLFormatTarget& t,
                const ::percolatorOutNs::peptide_seq& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::peptide_seq_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  peptide_seq_ (::xercesc::DOMDocument& d,
                const ::percolatorOutNs::peptide_seq& s,
                ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "peptide_seq" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "peptide_seq",
        "http://per-colator.com/percolator_out/13");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  peptide_seq_ (const ::percolatorOutNs::peptide_seq& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "peptide_seq",
        "http://per-colator.com/percolator_out/13",
        m, f));

    ::percolatorOutNs::peptide_seq_ (*d, s, f);
    return d;
  }

  void
  protein_id (::std::ostream& o,
              const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::protein_id (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  protein_id (::std::ostream& o,
              const ::xml_schema::string& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::protein_id (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  protein_id (::std::ostream& o,
              const ::xml_schema::string& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::protein_id (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  protein_id (::xercesc::XMLFormatTarget& t,
              const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::protein_id (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  protein_id (::xercesc::XMLFormatTarget& t,
              const ::xml_schema::string& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::protein_id (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  protein_id (::xercesc::XMLFormatTarget& t,
              const ::xml_schema::string& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::protein_id (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  protein_id (::xercesc::DOMDocument& d,
              const ::xml_schema::string& s,
              ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "protein_id" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "protein_id",
        "http://per-colator.com/percolator_out/13");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  protein_id (const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "protein_id",
        "http://per-colator.com/percolator_out/13",
        m, f));

    ::percolatorOutNs::protein_id (*d, s, f);
    return d;
  }

  void
  psm_ids_ (::std::ostream& o,
            const ::percolatorOutNs::psm_ids& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::psm_ids_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  psm_ids_ (::std::ostream& o,
            const ::percolatorOutNs::psm_ids& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::psm_ids_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  psm_ids_ (::std::ostream& o,
            const ::percolatorOutNs::psm_ids& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::psm_ids_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  psm_ids_ (::xercesc::XMLFormatTarget& t,
            const ::percolatorOutNs::psm_ids& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::psm_ids_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  psm_ids_ (::xercesc::XMLFormatTarget& t,
            const ::percolatorOutNs::psm_ids& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::psm_ids_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  psm_ids_ (::xercesc::XMLFormatTarget& t,
            const ::percolatorOutNs::psm_ids& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::psm_ids_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  psm_ids_ (::xercesc::DOMDocument& d,
            const ::percolatorOutNs::psm_ids& s,
            ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "psm_ids" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "psm_ids",
        "http://per-colator.com/percolator_out/13");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  psm_ids_ (const ::percolatorOutNs::psm_ids& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "psm_ids",
        "http://per-colator.com/percolator_out/13",
        m, f));

    ::percolatorOutNs::psm_ids_ (*d, s, f);
    return d;
  }

  void
  p_value (::std::ostream& o,
           const ::percolatorOutNs::probability_t& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::p_value (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  p_value (::std::ostream& o,
           const ::percolatorOutNs::probability_t& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::p_value (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  p_value (::std::ostream& o,
           const ::percolatorOutNs::probability_t& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::p_value (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  p_value (::xercesc::XMLFormatTarget& t,
           const ::percolatorOutNs::probability_t& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::p_value (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  p_value (::xercesc::XMLFormatTarget& t,
           const ::percolatorOutNs::probability_t& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::p_value (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  p_value (::xercesc::XMLFormatTarget& t,
           const ::percolatorOutNs::probability_t& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::p_value (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  p_value (::xercesc::DOMDocument& d,
           const ::percolatorOutNs::probability_t& s,
           ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "p_value" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "p_value",
        "http://per-colator.com/percolator_out/13");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  p_value (const ::percolatorOutNs::probability_t& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "p_value",
        "http://per-colator.com/percolator_out/13",
        m, f));

    ::percolatorOutNs::p_value (*d, s, f);
    return d;
  }

  void
  psm_ (::std::ostream& o,
        const ::percolatorOutNs::psm& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::psm_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  psm_ (::std::ostream& o,
        const ::percolatorOutNs::psm& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::psm_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  psm_ (::std::ostream& o,
        const ::percolatorOutNs::psm& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::psm_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  psm_ (::xercesc::XMLFormatTarget& t,
        const ::percolatorOutNs::psm& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::psm_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  psm_ (::xercesc::XMLFormatTarget& t,
        const ::percolatorOutNs::psm& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::psm_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  psm_ (::xercesc::XMLFormatTarget& t,
        const ::percolatorOutNs::psm& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::psm_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  psm_ (::xercesc::DOMDocument& d,
        const ::percolatorOutNs::psm& s,
        ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "psm" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "psm",
        "http://per-colator.com/percolator_out/13");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  psm_ (const ::percolatorOutNs::psm& s,
        const ::xml_schema::namespace_infomap& m,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "psm",
        "http://per-colator.com/percolator_out/13",
        m, f));

    ::percolatorOutNs::psm_ (*d, s, f);
    return d;
  }

  void
  psms_ (::std::ostream& o,
         const ::percolatorOutNs::psms& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::psms_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  psms_ (::std::ostream& o,
         const ::percolatorOutNs::psms& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::psms_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  psms_ (::std::ostream& o,
         const ::percolatorOutNs::psms& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::psms_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  psms_ (::xercesc::XMLFormatTarget& t,
         const ::percolatorOutNs::psms& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::psms_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  psms_ (::xercesc::XMLFormatTarget& t,
         const ::percolatorOutNs::psms& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::psms_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  psms_ (::xercesc::XMLFormatTarget& t,
         const ::percolatorOutNs::psms& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::psms_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  psms_ (::xercesc::DOMDocument& d,
         const ::percolatorOutNs::psms& s,
         ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "psms" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "psms",
        "http://per-colator.com/percolator_out/13");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  psms_ (const ::percolatorOutNs::psms& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "psms",
        "http://per-colator.com/percolator_out/13",
        m, f));

    ::percolatorOutNs::psms_ (*d, s, f);
    return d;
  }

  void
  peptide_ (::std::ostream& o,
            const ::percolatorOutNs::peptide& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::peptide_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  peptide_ (::std::ostream& o,
            const ::percolatorOutNs::peptide& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::peptide_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  peptide_ (::std::ostream& o,
            const ::percolatorOutNs::peptide& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::peptide_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  peptide_ (::xercesc::XMLFormatTarget& t,
            const ::percolatorOutNs::peptide& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::peptide_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  peptide_ (::xercesc::XMLFormatTarget& t,
            const ::percolatorOutNs::peptide& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::peptide_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  peptide_ (::xercesc::XMLFormatTarget& t,
            const ::percolatorOutNs::peptide& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::peptide_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  peptide_ (::xercesc::DOMDocument& d,
            const ::percolatorOutNs::peptide& s,
            ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "peptide" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "peptide",
        "http://per-colator.com/percolator_out/13");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  peptide_ (const ::percolatorOutNs::peptide& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "peptide",
        "http://per-colator.com/percolator_out/13",
        m, f));

    ::percolatorOutNs::peptide_ (*d, s, f);
    return d;
  }

  void
  peptides_ (::std::ostream& o,
             const ::percolatorOutNs::peptides& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::peptides_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  peptides_ (::std::ostream& o,
             const ::percolatorOutNs::peptides& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::peptides_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  peptides_ (::std::ostream& o,
             const ::percolatorOutNs::peptides& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::peptides_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  peptides_ (::xercesc::XMLFormatTarget& t,
             const ::percolatorOutNs::peptides& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::peptides_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  peptides_ (::xercesc::XMLFormatTarget& t,
             const ::percolatorOutNs::peptides& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::peptides_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  peptides_ (::xercesc::XMLFormatTarget& t,
             const ::percolatorOutNs::peptides& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::peptides_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  peptides_ (::xercesc::DOMDocument& d,
             const ::percolatorOutNs::peptides& s,
             ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "peptides" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "peptides",
        "http://per-colator.com/percolator_out/13");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  peptides_ (const ::percolatorOutNs::peptides& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "peptides",
        "http://per-colator.com/percolator_out/13",
        m, f));

    ::percolatorOutNs::peptides_ (*d, s, f);
    return d;
  }

  void
  protein_ (::std::ostream& o,
            const ::percolatorOutNs::protein& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::protein_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  protein_ (::std::ostream& o,
            const ::percolatorOutNs::protein& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::protein_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  protein_ (::std::ostream& o,
            const ::percolatorOutNs::protein& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::protein_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  protein_ (::xercesc::XMLFormatTarget& t,
            const ::percolatorOutNs::protein& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::protein_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  protein_ (::xercesc::XMLFormatTarget& t,
            const ::percolatorOutNs::protein& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::protein_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  protein_ (::xercesc::XMLFormatTarget& t,
            const ::percolatorOutNs::protein& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::protein_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  protein_ (::xercesc::DOMDocument& d,
            const ::percolatorOutNs::protein& s,
            ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "protein" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "protein",
        "http://per-colator.com/percolator_out/13");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  protein_ (const ::percolatorOutNs::protein& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "protein",
        "http://per-colator.com/percolator_out/13",
        m, f));

    ::percolatorOutNs::protein_ (*d, s, f);
    return d;
  }

  void
  proteins_ (::std::ostream& o,
             const ::percolatorOutNs::proteins& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::proteins_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  proteins_ (::std::ostream& o,
             const ::percolatorOutNs::proteins& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::proteins_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  proteins_ (::std::ostream& o,
             const ::percolatorOutNs::proteins& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::proteins_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  proteins_ (::xercesc::XMLFormatTarget& t,
             const ::percolatorOutNs::proteins& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::proteins_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  proteins_ (::xercesc::XMLFormatTarget& t,
             const ::percolatorOutNs::proteins& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::proteins_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  proteins_ (::xercesc::XMLFormatTarget& t,
             const ::percolatorOutNs::proteins& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::proteins_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  proteins_ (::xercesc::DOMDocument& d,
             const ::percolatorOutNs::proteins& s,
             ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "proteins" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "proteins",
        "http://per-colator.com/percolator_out/13");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  proteins_ (const ::percolatorOutNs::proteins& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "proteins",
        "http://per-colator.com/percolator_out/13",
        m, f));

    ::percolatorOutNs::proteins_ (*d, s, f);
    return d;
  }

  void
  percolator_output_ (::std::ostream& o,
                      const ::percolatorOutNs::percolator_output& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::percolator_output_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  percolator_output_ (::std::ostream& o,
                      const ::percolatorOutNs::percolator_output& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::percolator_output_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  percolator_output_ (::std::ostream& o,
                      const ::percolatorOutNs::percolator_output& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::percolator_output_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  percolator_output_ (::xercesc::XMLFormatTarget& t,
                      const ::percolatorOutNs::percolator_output& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::percolator_output_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  percolator_output_ (::xercesc::XMLFormatTarget& t,
                      const ::percolatorOutNs::percolator_output& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::percolator_output_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  percolator_output_ (::xercesc::XMLFormatTarget& t,
                      const ::percolatorOutNs::percolator_output& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::percolatorOutNs::percolator_output_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  percolator_output_ (::xercesc::DOMDocument& d,
                      const ::percolatorOutNs::percolator_output& s,
                      ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "percolator_output" &&
        n.namespace_ () == "http://per-colator.com/percolator_out/13")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "percolator_output",
        "http://per-colator.com/percolator_out/13");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  percolator_output_ (const ::percolatorOutNs::percolator_output& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "percolator_output",
        "http://per-colator.com/percolator_out/13",
        m, f));

    ::percolatorOutNs::percolator_output_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const probability_t_member& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const probability_t_member& i)
  {
    a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const probability_t_member& i)
  {
    l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const probability_t_member1& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const probability_t_member1& i)
  {
    a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const probability_t_member1& i)
  {
    l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const process_info& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // command_line
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "command_line",
          "http://per-colator.com/percolator_out/13",
          e));

      s << i.command_line ();
    }

    // other_command_line
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "other_command_line",
          "http://per-colator.com/percolator_out/13",
          e));

      s << i.other_command_line ();
    }

    // pi_0_psms
    //
    if (i.pi_0_psms ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "pi_0_psms",
          "http://per-colator.com/percolator_out/13",
          e));

      s << *i.pi_0_psms ();
    }

    // pi_0_peptides
    //
    if (i.pi_0_peptides ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "pi_0_peptides",
          "http://per-colator.com/percolator_out/13",
          e));

      s << *i.pi_0_peptides ();
    }

    // pi_0_proteins
    //
    if (i.pi_0_proteins ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "pi_0_proteins",
          "http://per-colator.com/percolator_out/13",
          e));

      s << *i.pi_0_proteins ();
    }

    // average_delta_mass
    //
    if (i.average_delta_mass ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "average_delta_mass",
          "http://per-colator.com/percolator_out/13",
          e));

      s << ::xml_schema::as_double(*i.average_delta_mass ());
    }

    // average_pi
    //
    if (i.average_pi ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "average_pi",
          "http://per-colator.com/percolator_out/13",
          e));

      s << ::xml_schema::as_double(*i.average_pi ());
    }

    // comment
    //
    for (process_info::comment_const_iterator
         b (i.comment ().begin ()), n (i.comment ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "comment",
          "http://per-colator.com/percolator_out/13",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const retentionTime& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // predicted
    //
    if (i.predicted ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "predicted",
          e));

      a << ::xml_schema::as_double(*i.predicted ());
    }

    // observed
    //
    if (i.observed ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "observed",
          e));

      a << ::xml_schema::as_double(*i.observed ());
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const peptide_seq& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // n
    //
    if (i.n ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "n",
          e));

      a << *i.n ();
    }

    // c
    //
    if (i.c ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "c",
          e));

      a << *i.c ();
    }

    // seq
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "seq",
          e));

      a << i.seq ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const psm_ids& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // psm_id
    //
    for (psm_ids::psm_id_const_iterator
         b (i.psm_id ().begin ()), n (i.psm_id ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "psm_id",
          "http://per-colator.com/percolator_out/13",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const psm& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // svm_score
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "svm_score",
          "http://per-colator.com/percolator_out/13",
          e));

      s << ::xml_schema::as_double(i.svm_score ());
    }

    // q_value
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "q_value",
          "http://per-colator.com/percolator_out/13",
          e));

      s << i.q_value ();
    }

    // pep
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "pep",
          "http://per-colator.com/percolator_out/13",
          e));

      s << i.pep ();
    }

    // exp_mass
    //
    if (i.exp_mass ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "exp_mass",
          "http://per-colator.com/percolator_out/13",
          e));

      s << ::xml_schema::as_double(*i.exp_mass ());
    }

    // calc_mass
    //
    if (i.calc_mass ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "calc_mass",
          "http://per-colator.com/percolator_out/13",
          e));

      s << ::xml_schema::as_double(*i.calc_mass ());
    }

    // retentionTime
    //
    if (i.retentionTime ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "retentionTime",
          "http://per-colator.com/percolator_out/13",
          e));

      s << *i.retentionTime ();
    }

    // peptide_seq
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "peptide_seq",
          "http://per-colator.com/percolator_out/13",
          e));

      s << i.peptide_seq ();
    }

    // protein_id
    //
    for (psm::protein_id_const_iterator
         b (i.protein_id ().begin ()), n (i.protein_id ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "protein_id",
          "http://per-colator.com/percolator_out/13",
          e));

      s << *b;
    }

    // p_value
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "p_value",
          "http://per-colator.com/percolator_out/13",
          e));

      s << i.p_value ();
    }

    // psm_id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "psm_id",
          "http://per-colator.com/percolator_out/13",
          e));

      a << i.psm_id ();
    }

    // decoy
    //
    if (i.decoy ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "decoy",
          "http://per-colator.com/percolator_out/13",
          e));

      a << *i.decoy ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const psms& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // psm
    //
    for (psms::psm_const_iterator
         b (i.psm ().begin ()), n (i.psm ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "psm",
          "http://per-colator.com/percolator_out/13",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const peptide& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // svm_score
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "svm_score",
          "http://per-colator.com/percolator_out/13",
          e));

      s << ::xml_schema::as_double(i.svm_score ());
    }

    // q_value
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "q_value",
          "http://per-colator.com/percolator_out/13",
          e));

      s << i.q_value ();
    }

    // pep
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "pep",
          "http://per-colator.com/percolator_out/13",
          e));

      s << i.pep ();
    }

    // exp_mass
    //
    if (i.exp_mass ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "exp_mass",
          "http://per-colator.com/percolator_out/13",
          e));

      s << ::xml_schema::as_double(*i.exp_mass ());
    }

    // calc_mass
    //
    if (i.calc_mass ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "calc_mass",
          "http://per-colator.com/percolator_out/13",
          e));

      s << ::xml_schema::as_double(*i.calc_mass ());
    }

    // retentionTime
    //
    if (i.retentionTime ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "retentionTime",
          "http://per-colator.com/percolator_out/13",
          e));

      s << *i.retentionTime ();
    }

    // protein_id
    //
    for (peptide::protein_id_const_iterator
         b (i.protein_id ().begin ()), n (i.protein_id ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "protein_id",
          "http://per-colator.com/percolator_out/13",
          e));

      s << *b;
    }

    // p_value
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "p_value",
          "http://per-colator.com/percolator_out/13",
          e));

      s << i.p_value ();
    }

    // psm_ids
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "psm_ids",
          "http://per-colator.com/percolator_out/13",
          e));

      s << i.psm_ids ();
    }

    // peptide_id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "peptide_id",
          "http://per-colator.com/percolator_out/13",
          e));

      a << i.peptide_id ();
    }

    // decoy
    //
    if (i.decoy ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "decoy",
          "http://per-colator.com/percolator_out/13",
          e));

      a << *i.decoy ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const peptides& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // peptide
    //
    for (peptides::peptide_const_iterator
         b (i.peptide ().begin ()), n (i.peptide ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "peptide",
          "http://per-colator.com/percolator_out/13",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const protein& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // pep
    //
    if (i.pep ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "pep",
          "http://per-colator.com/percolator_out/13",
          e));

      s << *i.pep ();
    }

    // q_value
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "q_value",
          "http://per-colator.com/percolator_out/13",
          e));

      s << i.q_value ();
    }

    // peptide_seq
    //
    for (protein::peptide_seq_const_iterator
         b (i.peptide_seq ().begin ()), n (i.peptide_seq ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "peptide_seq",
          "http://per-colator.com/percolator_out/13",
          e));

      s << *b;
    }

    // protein_id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "protein_id",
          "http://per-colator.com/percolator_out/13",
          e));

      a << i.protein_id ();
    }

    // decoy
    //
    if (i.decoy ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "decoy",
          "http://per-colator.com/percolator_out/13",
          e));

      a << *i.decoy ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const proteins& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // protein
    //
    for (proteins::protein_const_iterator
         b (i.protein ().begin ()), n (i.protein ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "protein",
          "http://per-colator.com/percolator_out/13",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const percolator_output& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // process_info
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "process_info",
          "http://per-colator.com/percolator_out/13",
          e));

      s << i.process_info ();
    }

    // psms
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "psms",
          "http://per-colator.com/percolator_out/13",
          e));

      s << i.psms ();
    }

    // peptides
    //
    if (i.peptides ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "peptides",
          "http://per-colator.com/percolator_out/13",
          e));

      s << *i.peptides ();
    }

    // proteins
    //
    if (i.proteins ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "proteins",
          "http://per-colator.com/percolator_out/13",
          e));

      s << *i.proteins ();
    }

    // percolator_version
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "percolator_version",
          "http://per-colator.com/percolator_out/13",
          e));

      a << i.percolator_version ();
    }

    // majorVersion
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "majorVersion",
          "http://per-colator.com/percolator_out/13",
          e));

      a << i.majorVersion ();
    }

    // minorVersion
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "minorVersion",
          "http://per-colator.com/percolator_out/13",
          e));

      a << i.minorVersion ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const comment& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "name",
          e));

      a << i.name ();
    }

    // value
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "value",
          e));

      a << i.value ();
    }
  }
}

namespace percolatorOutNs
{
  probability_t::
  probability_t (::xml_schema::istream< XDR >& s,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::string (s, f, c)
  {
  }

  aa_seq_t::
  aa_seq_t (::xml_schema::istream< XDR >& s,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::string (s, f, c)
  {
  }

  aa_term_t::
  aa_term_t (::xml_schema::istream< XDR >& s,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::string (s, f, c)
  {
  }

  probability_t_member::
  probability_t_member (::xml_schema::istream< XDR >& s,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (s, f, c)
  {
  }

  probability_t_member1::
  probability_t_member1 (::xml_schema::istream< XDR >& s,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (s, f, c)
  {
  }

  process_info::
  process_info (::xml_schema::istream< XDR >& s,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (s, f, c),
    command_line_ (f, this),
    other_command_line_ (f, this),
    pi_0_psms_ (f, this),
    pi_0_peptides_ (f, this),
    pi_0_proteins_ (f, this),
    average_delta_mass_ (f, this),
    average_pi_ (f, this),
    comment_ (f, this)
  {
    this->parse (s, f);
  }

  void process_info::
  parse (::xml_schema::istream< XDR >& s,
         ::xml_schema::flags f)
  {
    {
      ::std::auto_ptr< command_line_type > r (new command_line_type (s, f, this));
      this->command_line_.set (r);
    }

    {
      ::std::auto_ptr< other_command_line_type > r (new other_command_line_type (s, f, this));
      this->other_command_line_.set (r);
    }

    {
      bool p;
      s >> p;
      if (p)
      {
        ::std::auto_ptr< pi_0_psms_type > r (new pi_0_psms_type (s, f, this));
        this->pi_0_psms_.set (r);
      }
    }

    {
      bool p;
      s >> p;
      if (p)
      {
        ::std::auto_ptr< pi_0_peptides_type > r (new pi_0_peptides_type (s, f, this));
        this->pi_0_peptides_.set (r);
      }
    }

    {
      bool p;
      s >> p;
      if (p)
      {
        ::std::auto_ptr< pi_0_proteins_type > r (new pi_0_proteins_type (s, f, this));
        this->pi_0_proteins_.set (r);
      }
    }

    {
      bool p;
      s >> p;
      if (p)
      {
        average_delta_mass_type r;
        s >> r;
        this->average_delta_mass_.set (r);
      }
    }

    {
      bool p;
      s >> p;
      if (p)
      {
        average_pi_type r;
        s >> r;
        this->average_pi_.set (r);
      }
    }

    {
      ::std::size_t n;
      ::xsd::cxx::tree::istream_common::as_size< ::std::size_t > as (n);
      s >> as;
      if (n > 0)
      {
        comment_sequence& c (this->comment_);
        c.reserve (n);
        while (n--)
        {
          ::std::auto_ptr< comment_type > r (new comment_type (s, f, this));
          c.push_back (r);
        }
      }
    }
  }

  retentionTime::
  retentionTime (::xml_schema::istream< XDR >& s,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (s, f, c),
    predicted_ (f, this),
    observed_ (f, this)
  {
    this->parse (s, f);
  }

  void retentionTime::
  parse (::xml_schema::istream< XDR >& s,
         ::xml_schema::flags f)
  {
    {
      bool p;
      s >> p;
      if (p)
      {
        predicted_type r;
        s >> r;
        this->predicted_.set (r);
      }
    }

    {
      bool p;
      s >> p;
      if (p)
      {
        observed_type r;
        s >> r;
        this->observed_.set (r);
      }
    }
  }

  peptide_seq::
  peptide_seq (::xml_schema::istream< XDR >& s,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (s, f, c),
    n_ (f, this),
    c_ (f, this),
    seq_ (f, this)
  {
    this->parse (s, f);
  }

  void peptide_seq::
  parse (::xml_schema::istream< XDR >& s,
         ::xml_schema::flags f)
  {
    {
      bool p;
      s >> p;
      if (p)
      {
        ::std::auto_ptr< n_type > r (new n_type (s, f, this));
        this->n_.set (r);
      }
    }

    {
      bool p;
      s >> p;
      if (p)
      {
        ::std::auto_ptr< c_type > r (new c_type (s, f, this));
        this->c_.set (r);
      }
    }

    {
      ::std::auto_ptr< seq_type > r (new seq_type (s, f, this));
      this->seq_.set (r);
    }
  }

  psm_ids::
  psm_ids (::xml_schema::istream< XDR >& s,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (s, f, c),
    psm_id_ (f, this)
  {
    this->parse (s, f);
  }

  void psm_ids::
  parse (::xml_schema::istream< XDR >& s,
         ::xml_schema::flags f)
  {
    {
      ::std::size_t n;
      ::xsd::cxx::tree::istream_common::as_size< ::std::size_t > as (n);
      s >> as;
      if (n > 0)
      {
        psm_id_sequence& c (this->psm_id_);
        c.reserve (n);
        while (n--)
        {
          ::std::auto_ptr< psm_id_type > r (new psm_id_type (s, f, this));
          c.push_back (r);
        }
      }
    }
  }

  psm::
  psm (::xml_schema::istream< XDR >& s,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
  : ::xml_schema::type (s, f, c),
    svm_score_ (f, this),
    q_value_ (f, this),
    pep_ (f, this),
    exp_mass_ (f, this),
    calc_mass_ (f, this),
    retentionTime_ (f, this),
    peptide_seq_ (f, this),
    protein_id_ (f, this),
    p_value_ (f, this),
    psm_id_ (f, this),
    decoy_ (f, this)
  {
    this->parse (s, f);
  }

  void psm::
  parse (::xml_schema::istream< XDR >& s,
         ::xml_schema::flags f)
  {
    {
      svm_score_type r;
      s >> r;
      this->svm_score_.set (r);
    }

    {
      ::std::auto_ptr< q_value_type > r (new q_value_type (s, f, this));
      this->q_value_.set (r);
    }

    {
      ::std::auto_ptr< pep_type > r (new pep_type (s, f, this));
      this->pep_.set (r);
    }

    {
      bool p;
      s >> p;
      if (p)
      {
        exp_mass_type r;
        s >> r;
        this->exp_mass_.set (r);
      }
    }

    {
      bool p;
      s >> p;
      if (p)
      {
        calc_mass_type r;
        s >> r;
        this->calc_mass_.set (r);
      }
    }

    {
      bool p;
      s >> p;
      if (p)
      {
        ::std::auto_ptr< retentionTime_type > r (new retentionTime_type (s, f, this));
        this->retentionTime_.set (r);
      }
    }

    {
      ::std::auto_ptr< peptide_seq_type > r (new peptide_seq_type (s, f, this));
      this->peptide_seq_.set (r);
    }

    {
      ::std::size_t n;
      ::xsd::cxx::tree::istream_common::as_size< ::std::size_t > as (n);
      s >> as;
      if (n > 0)
      {
        protein_id_sequence& c (this->protein_id_);
        c.reserve (n);
        while (n--)
        {
          ::std::auto_ptr< protein_id_type > r (new protein_id_type (s, f, this));
          c.push_back (r);
        }
      }
    }

    {
      ::std::auto_ptr< p_value_type > r (new p_value_type (s, f, this));
      this->p_value_.set (r);
    }

    {
      ::std::auto_ptr< psm_id_type > r (new psm_id_type (s, f, this));
      this->psm_id_.set (r);
    }

    {
      bool p;
      s >> p;
      if (p)
      {
        decoy_type r;
        s >> r;
        this->decoy_.set (r);
      }
    }
  }

  psms::
  psms (::xml_schema::istream< XDR >& s,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::type (s, f, c),
    psm_ (f, this)
  {
    this->parse (s, f);
  }

  void psms::
  parse (::xml_schema::istream< XDR >& s,
         ::xml_schema::flags f)
  {
    {
      ::std::size_t n;
      ::xsd::cxx::tree::istream_common::as_size< ::std::size_t > as (n);
      s >> as;
      if (n > 0)
      {
        psm_sequence& c (this->psm_);
        c.reserve (n);
        while (n--)
        {
          ::std::auto_ptr< psm_type > r (new psm_type (s, f, this));
          c.push_back (r);
        }
      }
    }
  }

  peptide::
  peptide (::xml_schema::istream< XDR >& s,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (s, f, c),
    svm_score_ (f, this),
    q_value_ (f, this),
    pep_ (f, this),
    exp_mass_ (f, this),
    calc_mass_ (f, this),
    retentionTime_ (f, this),
    protein_id_ (f, this),
    p_value_ (f, this),
    psm_ids_ (f, this),
    peptide_id_ (f, this),
    decoy_ (f, this)
  {
    this->parse (s, f);
  }

  void peptide::
  parse (::xml_schema::istream< XDR >& s,
         ::xml_schema::flags f)
  {
    {
      svm_score_type r;
      s >> r;
      this->svm_score_.set (r);
    }

    {
      ::std::auto_ptr< q_value_type > r (new q_value_type (s, f, this));
      this->q_value_.set (r);
    }

    {
      ::std::auto_ptr< pep_type > r (new pep_type (s, f, this));
      this->pep_.set (r);
    }

    {
      bool p;
      s >> p;
      if (p)
      {
        exp_mass_type r;
        s >> r;
        this->exp_mass_.set (r);
      }
    }

    {
      bool p;
      s >> p;
      if (p)
      {
        calc_mass_type r;
        s >> r;
        this->calc_mass_.set (r);
      }
    }

    {
      bool p;
      s >> p;
      if (p)
      {
        ::std::auto_ptr< retentionTime_type > r (new retentionTime_type (s, f, this));
        this->retentionTime_.set (r);
      }
    }

    {
      ::std::size_t n;
      ::xsd::cxx::tree::istream_common::as_size< ::std::size_t > as (n);
      s >> as;
      if (n > 0)
      {
        protein_id_sequence& c (this->protein_id_);
        c.reserve (n);
        while (n--)
        {
          ::std::auto_ptr< protein_id_type > r (new protein_id_type (s, f, this));
          c.push_back (r);
        }
      }
    }

    {
      ::std::auto_ptr< p_value_type > r (new p_value_type (s, f, this));
      this->p_value_.set (r);
    }

    {
      ::std::auto_ptr< psm_ids_type > r (new psm_ids_type (s, f, this));
      this->psm_ids_.set (r);
    }

    {
      ::std::auto_ptr< peptide_id_type > r (new peptide_id_type (s, f, this));
      this->peptide_id_.set (r);
    }

    {
      bool p;
      s >> p;
      if (p)
      {
        decoy_type r;
        s >> r;
        this->decoy_.set (r);
      }
    }
  }

  peptides::
  peptides (::xml_schema::istream< XDR >& s,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (s, f, c),
    peptide_ (f, this)
  {
    this->parse (s, f);
  }

  void peptides::
  parse (::xml_schema::istream< XDR >& s,
         ::xml_schema::flags f)
  {
    {
      ::std::size_t n;
      ::xsd::cxx::tree::istream_common::as_size< ::std::size_t > as (n);
      s >> as;
      if (n > 0)
      {
        peptide_sequence& c (this->peptide_);
        c.reserve (n);
        while (n--)
        {
          ::std::auto_ptr< peptide_type > r (new peptide_type (s, f, this));
          c.push_back (r);
        }
      }
    }
  }

  protein::
  protein (::xml_schema::istream< XDR >& s,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (s, f, c),
    pep_ (f, this),
    q_value_ (f, this),
    peptide_seq_ (f, this),
    protein_id_ (f, this),
    decoy_ (f, this)
  {
    this->parse (s, f);
  }

  void protein::
  parse (::xml_schema::istream< XDR >& s,
         ::xml_schema::flags f)
  {
    {
      bool p;
      s >> p;
      if (p)
      {
        ::std::auto_ptr< pep_type > r (new pep_type (s, f, this));
        this->pep_.set (r);
      }
    }

    {
      ::std::auto_ptr< q_value_type > r (new q_value_type (s, f, this));
      this->q_value_.set (r);
    }

    {
      ::std::size_t n;
      ::xsd::cxx::tree::istream_common::as_size< ::std::size_t > as (n);
      s >> as;
      if (n > 0)
      {
        peptide_seq_sequence& c (this->peptide_seq_);
        c.reserve (n);
        while (n--)
        {
          ::std::auto_ptr< peptide_seq_type > r (new peptide_seq_type (s, f, this));
          c.push_back (r);
        }
      }
    }

    {
      ::std::auto_ptr< protein_id_type > r (new protein_id_type (s, f, this));
      this->protein_id_.set (r);
    }

    {
      bool p;
      s >> p;
      if (p)
      {
        decoy_type r;
        s >> r;
        this->decoy_.set (r);
      }
    }
  }

  proteins::
  proteins (::xml_schema::istream< XDR >& s,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (s, f, c),
    protein_ (f, this)
  {
    this->parse (s, f);
  }

  void proteins::
  parse (::xml_schema::istream< XDR >& s,
         ::xml_schema::flags f)
  {
    {
      ::std::size_t n;
      ::xsd::cxx::tree::istream_common::as_size< ::std::size_t > as (n);
      s >> as;
      if (n > 0)
      {
        protein_sequence& c (this->protein_);
        c.reserve (n);
        while (n--)
        {
          ::std::auto_ptr< protein_type > r (new protein_type (s, f, this));
          c.push_back (r);
        }
      }
    }
  }

  percolator_output::
  percolator_output (::xml_schema::istream< XDR >& s,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::type (s, f, c),
    process_info_ (f, this),
    psms_ (f, this),
    peptides_ (f, this),
    proteins_ (f, this),
    percolator_version_ (f, this),
    majorVersion_ (f, this),
    minorVersion_ (f, this)
  {
    this->parse (s, f);
  }

  void percolator_output::
  parse (::xml_schema::istream< XDR >& s,
         ::xml_schema::flags f)
  {
    {
      ::std::auto_ptr< process_info_type > r (new process_info_type (s, f, this));
      this->process_info_.set (r);
    }

    {
      ::std::auto_ptr< psms_type > r (new psms_type (s, f, this));
      this->psms_.set (r);
    }

    {
      bool p;
      s >> p;
      if (p)
      {
        ::std::auto_ptr< peptides_type > r (new peptides_type (s, f, this));
        this->peptides_.set (r);
      }
    }

    {
      bool p;
      s >> p;
      if (p)
      {
        ::std::auto_ptr< proteins_type > r (new proteins_type (s, f, this));
        this->proteins_.set (r);
      }
    }

    {
      ::std::auto_ptr< percolator_version_type > r (new percolator_version_type (s, f, this));
      this->percolator_version_.set (r);
    }

    {
      majorVersion_type r;
      s >> r;
      this->majorVersion_.set (r);
    }

    {
      minorVersion_type r;
      s >> r;
      this->minorVersion_.set (r);
    }
  }

  comment::
  comment (::xml_schema::istream< XDR >& s,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (s, f, c),
    name_ (f, this),
    value_ (f, this)
  {
    this->parse (s, f);
  }

  void comment::
  parse (::xml_schema::istream< XDR >& s,
         ::xml_schema::flags f)
  {
    {
      ::std::auto_ptr< name_type > r (new name_type (s, f, this));
      this->name_.set (r);
    }

    {
      ::std::auto_ptr< value_type > r (new value_type (s, f, this));
      this->value_.set (r);
    }
  }
}

namespace percolatorOutNs
{
  ::xsd::cxx::tree::ostream< XDR >&
  operator<< (::xsd::cxx::tree::ostream< XDR >& s,
              const probability_t& x)
  {
    return s << static_cast< const ::xml_schema::string& > (x);
  }

  ::xsd::cxx::tree::ostream< XDR >&
  operator<< (::xsd::cxx::tree::ostream< XDR >& s,
              const aa_seq_t& x)
  {
    s << static_cast< const ::xml_schema::string& > (x);
    return s;
  }

  ::xsd::cxx::tree::ostream< XDR >&
  operator<< (::xsd::cxx::tree::ostream< XDR >& s,
              const aa_term_t& x)
  {
    s << static_cast< const ::xml_schema::string& > (x);
    return s;
  }

  ::xsd::cxx::tree::ostream< XDR >&
  operator<< (::xsd::cxx::tree::ostream< XDR >& s,
              const probability_t_member& x)
  {
    return s << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >& > (x);
  }

  ::xsd::cxx::tree::ostream< XDR >&
  operator<< (::xsd::cxx::tree::ostream< XDR >& s,
              const probability_t_member1& x)
  {
    s << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >& > (x);
    return s;
  }

  ::xsd::cxx::tree::ostream< XDR >&
  operator<< (::xsd::cxx::tree::ostream< XDR >& s,
              const process_info& x)
  {
    s << x.command_line ();
    s << x.other_command_line ();
    {
      bool p (x.pi_0_psms ());
      s << p;
      if (p)
        s << *x.pi_0_psms ();
    }

    {
      bool p (x.pi_0_peptides ());
      s << p;
      if (p)
        s << *x.pi_0_peptides ();
    }

    {
      bool p (x.pi_0_proteins ());
      s << p;
      if (p)
        s << *x.pi_0_proteins ();
    }

    {
      bool p (x.average_delta_mass ());
      s << p;
      if (p)
        s << *x.average_delta_mass ();
    }

    {
      bool p (x.average_pi ());
      s << p;
      if (p)
        s << *x.average_pi ();
    }

    {
      const process_info::comment_sequence& c (x.comment ());
      s << ::xsd::cxx::tree::ostream_common::as_size< ::std::size_t > (c.size ());
      for (process_info::comment_const_iterator
           i (c.begin ()), e (c.end ());
           i != e; ++i)
      {
        s << *i;
      }
    }

    return s;
  }

  ::xsd::cxx::tree::ostream< XDR >&
  operator<< (::xsd::cxx::tree::ostream< XDR >& s,
              const retentionTime& x)
  {
    {
      bool p (x.predicted ());
      s << p;
      if (p)
        s << *x.predicted ();
    }

    {
      bool p (x.observed ());
      s << p;
      if (p)
        s << *x.observed ();
    }

    return s;
  }

  ::xsd::cxx::tree::ostream< XDR >&
  operator<< (::xsd::cxx::tree::ostream< XDR >& s,
              const peptide_seq& x)
  {
    {
      bool p (x.n ());
      s << p;
      if (p)
        s << *x.n ();
    }

    {
      bool p (x.c ());
      s << p;
      if (p)
        s << *x.c ();
    }

    s << x.seq ();
    return s;
  }

  ::xsd::cxx::tree::ostream< XDR >&
  operator<< (::xsd::cxx::tree::ostream< XDR >& s,
              const psm_ids& x)
  {
    {
      const psm_ids::psm_id_sequence& c (x.psm_id ());
      s << ::xsd::cxx::tree::ostream_common::as_size< ::std::size_t > (c.size ());
      for (psm_ids::psm_id_const_iterator
           i (c.begin ()), e (c.end ());
           i != e; ++i)
      {
        s << *i;
      }
    }

    return s;
  }

  ::xsd::cxx::tree::ostream< XDR >&
  operator<< (::xsd::cxx::tree::ostream< XDR >& s,
              const psm& x)
  {
    s << x.svm_score ();
    s << x.q_value ();
    s << x.pep ();
    {
      bool p (x.exp_mass ());
      s << p;
      if (p)
        s << *x.exp_mass ();
    }

    {
      bool p (x.calc_mass ());
      s << p;
      if (p)
        s << *x.calc_mass ();
    }

    {
      bool p (x.retentionTime ());
      s << p;
      if (p)
        s << *x.retentionTime ();
    }

    s << x.peptide_seq ();
    {
      const psm::protein_id_sequence& c (x.protein_id ());
      s << ::xsd::cxx::tree::ostream_common::as_size< ::std::size_t > (c.size ());
      for (psm::protein_id_const_iterator
           i (c.begin ()), e (c.end ());
           i != e; ++i)
      {
        s << *i;
      }
    }

    s << x.p_value ();
    s << x.psm_id ();
    {
      bool p (x.decoy ());
      s << p;
      if (p)
        s << *x.decoy ();
    }

    return s;
  }

  ::xsd::cxx::tree::ostream< XDR >&
  operator<< (::xsd::cxx::tree::ostream< XDR >& s,
              const psms& x)
  {
    {
      const psms::psm_sequence& c (x.psm ());
      s << ::xsd::cxx::tree::ostream_common::as_size< ::std::size_t > (c.size ());
      for (psms::psm_const_iterator
           i (c.begin ()), e (c.end ());
           i != e; ++i)
      {
        s << *i;
      }
    }

    return s;
  }

  ::xsd::cxx::tree::ostream< XDR >&
  operator<< (::xsd::cxx::tree::ostream< XDR >& s,
              const peptide& x)
  {
    s << x.svm_score ();
    s << x.q_value ();
    s << x.pep ();
    {
      bool p (x.exp_mass ());
      s << p;
      if (p)
        s << *x.exp_mass ();
    }

    {
      bool p (x.calc_mass ());
      s << p;
      if (p)
        s << *x.calc_mass ();
    }

    {
      bool p (x.retentionTime ());
      s << p;
      if (p)
        s << *x.retentionTime ();
    }

    {
      const peptide::protein_id_sequence& c (x.protein_id ());
      s << ::xsd::cxx::tree::ostream_common::as_size< ::std::size_t > (c.size ());
      for (peptide::protein_id_const_iterator
           i (c.begin ()), e (c.end ());
           i != e; ++i)
      {
        s << *i;
      }
    }

    s << x.p_value ();
    s << x.psm_ids ();
    s << x.peptide_id ();
    {
      bool p (x.decoy ());
      s << p;
      if (p)
        s << *x.decoy ();
    }

    return s;
  }

  ::xsd::cxx::tree::ostream< XDR >&
  operator<< (::xsd::cxx::tree::ostream< XDR >& s,
              const peptides& x)
  {
    {
      const peptides::peptide_sequence& c (x.peptide ());
      s << ::xsd::cxx::tree::ostream_common::as_size< ::std::size_t > (c.size ());
      for (peptides::peptide_const_iterator
           i (c.begin ()), e (c.end ());
           i != e; ++i)
      {
        s << *i;
      }
    }

    return s;
  }

  ::xsd::cxx::tree::ostream< XDR >&
  operator<< (::xsd::cxx::tree::ostream< XDR >& s,
              const protein& x)
  {
    {
      bool p (x.pep ());
      s << p;
      if (p)
        s << *x.pep ();
    }

    s << x.q_value ();
    {
      const protein::peptide_seq_sequence& c (x.peptide_seq ());
      s << ::xsd::cxx::tree::ostream_common::as_size< ::std::size_t > (c.size ());
      for (protein::peptide_seq_const_iterator
           i (c.begin ()), e (c.end ());
           i != e; ++i)
      {
        s << *i;
      }
    }

    s << x.protein_id ();
    {
      bool p (x.decoy ());
      s << p;
      if (p)
        s << *x.decoy ();
    }

    return s;
  }

  ::xsd::cxx::tree::ostream< XDR >&
  operator<< (::xsd::cxx::tree::ostream< XDR >& s,
              const proteins& x)
  {
    {
      const proteins::protein_sequence& c (x.protein ());
      s << ::xsd::cxx::tree::ostream_common::as_size< ::std::size_t > (c.size ());
      for (proteins::protein_const_iterator
           i (c.begin ()), e (c.end ());
           i != e; ++i)
      {
        s << *i;
      }
    }

    return s;
  }

  ::xsd::cxx::tree::ostream< XDR >&
  operator<< (::xsd::cxx::tree::ostream< XDR >& s,
              const percolator_output& x)
  {
    s << x.process_info ();
    s << x.psms ();
    {
      bool p (x.peptides ());
      s << p;
      if (p)
        s << *x.peptides ();
    }

    {
      bool p (x.proteins ());
      s << p;
      if (p)
        s << *x.proteins ();
    }

    s << x.percolator_version ();
    s << x.majorVersion ();
    s << x.minorVersion ();
    return s;
  }

  ::xsd::cxx::tree::ostream< XDR >&
  operator<< (::xsd::cxx::tree::ostream< XDR >& s,
              const comment& x)
  {
    s << x.name ();
    s << x.value ();
    return s;
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

