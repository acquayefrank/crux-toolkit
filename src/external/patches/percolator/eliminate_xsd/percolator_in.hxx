// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_USERS_CEGRANT_PROJECTS_CRUX_TRUNK_SRC_EXTERNAL_BUILD_SRC_PERCOLATOR_SRC_XML_PERCOLATOR_IN_HXX
#define CXX_USERS_CEGRANT_PROJECTS_CRUX_TRUNK_SRC_EXTERNAL_BUILD_SRC_PERCOLATOR_SRC_XML_PERCOLATOR_IN_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/xdr-stream-insertion.hxx>
#include <xsd/cxx/tree/stream-insertion.hxx>

#include <xsd/cxx/tree/xdr-stream-extraction.hxx>
#include <xsd/cxx/tree/stream-extraction.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Data representation output stream template.
  //
  using ::xsd::cxx::tree::ostream;

  // Data representation input stream template.
  //
  using ::xsd::cxx::tree::istream;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace percolatorInNs
{
  class probability_t;
  class aa_seq_t;
  class aa_term_t;
  class peptideType;
  class modificationType;
  class experiment;
  class probability_t_member;
  class probability_t_member1;
  class uniMod;
  class freeTextInformation;
  class calibration;
  class process_info;
  class featureDescriptions;
  class fragSpectrumScan;
  class calibrationParameter;
  class massType;
  class featureDescription;
  class peptideSpectrumMatch;
  class features;
  class occurence;
  class startPosition;
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/istream-fwd.hxx>

namespace percolatorInNs
{
  class probability_t: public ::xml_schema::string
  {
    public:

    probability_t (const char* v);

    probability_t (const ::std::string& v);

    probability_t (::xml_schema::istream< XDR >& s,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    probability_t (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    probability_t (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    probability_t (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    probability_t (const probability_t& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual probability_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class aa_seq_t: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    aa_seq_t ();

    aa_seq_t (const char*);

    aa_seq_t (const ::std::string&);

    aa_seq_t (const ::xml_schema::string&);

    aa_seq_t (::xml_schema::istream< XDR >& s,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    aa_seq_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    aa_seq_t (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    aa_seq_t (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    aa_seq_t (const aa_seq_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual aa_seq_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~aa_seq_t ();
  };

  class aa_term_t: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    aa_term_t ();

    aa_term_t (const char*);

    aa_term_t (const ::std::string&);

    aa_term_t (const ::xml_schema::string&);

    aa_term_t (::xml_schema::istream< XDR >& s,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    aa_term_t (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    aa_term_t (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    aa_term_t (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    aa_term_t (const aa_term_t& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual aa_term_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~aa_term_t ();
  };

  class peptideType: public ::xml_schema::type
  {
    public:
    // peptideSequence
    // 
    typedef ::percolatorInNs::aa_seq_t peptideSequence_type;
    typedef ::xsd::cxx::tree::traits< peptideSequence_type, char > peptideSequence_traits;

    const peptideSequence_type&
    peptideSequence () const;

    peptideSequence_type&
    peptideSequence ();

    void
    peptideSequence (const peptideSequence_type& x);

    void
    peptideSequence (::std::auto_ptr< peptideSequence_type > p);

    // modification
    // 
    typedef ::percolatorInNs::modificationType modification_type;
    typedef ::xsd::cxx::tree::sequence< modification_type > modification_sequence;
    typedef modification_sequence::iterator modification_iterator;
    typedef modification_sequence::const_iterator modification_const_iterator;
    typedef ::xsd::cxx::tree::traits< modification_type, char > modification_traits;

    const modification_sequence&
    modification () const;

    modification_sequence&
    modification ();

    void
    modification (const modification_sequence& s);

    // Constructors.
    //
    peptideType (const peptideSequence_type&);

    peptideType (::xml_schema::istream< XDR >& s,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    peptideType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    peptideType (const peptideType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual peptideType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~peptideType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    ::xsd::cxx::tree::one< peptideSequence_type > peptideSequence_;
    modification_sequence modification_;
  };

  class modificationType: public ::xml_schema::type
  {
    public:
    // uniMod
    // 
    typedef ::percolatorInNs::uniMod uniMod_type;
    typedef ::xsd::cxx::tree::traits< uniMod_type, char > uniMod_traits;

    const uniMod_type&
    uniMod () const;

    uniMod_type&
    uniMod ();

    void
    uniMod (const uniMod_type& x);

    void
    uniMod (::std::auto_ptr< uniMod_type > p);

    // location
    // 
    typedef ::xml_schema::int_ location_type;
    typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

    const location_type&
    location () const;

    location_type&
    location ();

    void
    location (const location_type& x);

    // residues
    // 
    typedef ::percolatorInNs::aa_seq_t residues_type;
    typedef ::xsd::cxx::tree::optional< residues_type > residues_optional;
    typedef ::xsd::cxx::tree::traits< residues_type, char > residues_traits;

    const residues_optional&
    residues () const;

    residues_optional&
    residues ();

    void
    residues (const residues_type& x);

    void
    residues (const residues_optional& x);

    void
    residues (::std::auto_ptr< residues_type > p);

    // avgMassDelta
    // 
    typedef ::xml_schema::double_ avgMassDelta_type;
    typedef ::xsd::cxx::tree::optional< avgMassDelta_type > avgMassDelta_optional;
    typedef ::xsd::cxx::tree::traits< avgMassDelta_type, char, ::xsd::cxx::tree::schema_type::double_ > avgMassDelta_traits;

    const avgMassDelta_optional&
    avgMassDelta () const;

    avgMassDelta_optional&
    avgMassDelta ();

    void
    avgMassDelta (const avgMassDelta_type& x);

    void
    avgMassDelta (const avgMassDelta_optional& x);

    // monoisotopicMassDelta
    // 
    typedef ::xml_schema::double_ monoisotopicMassDelta_type;
    typedef ::xsd::cxx::tree::optional< monoisotopicMassDelta_type > monoisotopicMassDelta_optional;
    typedef ::xsd::cxx::tree::traits< monoisotopicMassDelta_type, char, ::xsd::cxx::tree::schema_type::double_ > monoisotopicMassDelta_traits;

    const monoisotopicMassDelta_optional&
    monoisotopicMassDelta () const;

    monoisotopicMassDelta_optional&
    monoisotopicMassDelta ();

    void
    monoisotopicMassDelta (const monoisotopicMassDelta_type& x);

    void
    monoisotopicMassDelta (const monoisotopicMassDelta_optional& x);

    // Constructors.
    //
    modificationType (const uniMod_type&,
                      const location_type&);

    modificationType (::std::auto_ptr< uniMod_type >&,
                      const location_type&);

    modificationType (::xml_schema::istream< XDR >& s,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    modificationType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    modificationType (const modificationType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual modificationType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~modificationType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    ::xsd::cxx::tree::one< uniMod_type > uniMod_;
    ::xsd::cxx::tree::one< location_type > location_;
    residues_optional residues_;
    avgMassDelta_optional avgMassDelta_;
    monoisotopicMassDelta_optional monoisotopicMassDelta_;
  };

  class experiment: public ::xml_schema::type
  {
    public:
    // freeTextInformation
    // 
    typedef ::percolatorInNs::freeTextInformation freeTextInformation_type;
    typedef ::xsd::cxx::tree::sequence< freeTextInformation_type > freeTextInformation_sequence;
    typedef freeTextInformation_sequence::iterator freeTextInformation_iterator;
    typedef freeTextInformation_sequence::const_iterator freeTextInformation_const_iterator;
    typedef ::xsd::cxx::tree::traits< freeTextInformation_type, char > freeTextInformation_traits;

    const freeTextInformation_sequence&
    freeTextInformation () const;

    freeTextInformation_sequence&
    freeTextInformation ();

    void
    freeTextInformation (const freeTextInformation_sequence& s);

    // enzyme
    // 
    typedef ::xml_schema::string enzyme_type;
    typedef ::xsd::cxx::tree::traits< enzyme_type, char > enzyme_traits;

    const enzyme_type&
    enzyme () const;

    enzyme_type&
    enzyme ();

    void
    enzyme (const enzyme_type& x);

    void
    enzyme (::std::auto_ptr< enzyme_type > p);

    // calibration
    // 
    typedef ::percolatorInNs::calibration calibration_type;
    typedef ::xsd::cxx::tree::optional< calibration_type > calibration_optional;
    typedef ::xsd::cxx::tree::traits< calibration_type, char > calibration_traits;

    const calibration_optional&
    calibration () const;

    calibration_optional&
    calibration ();

    void
    calibration (const calibration_type& x);

    void
    calibration (const calibration_optional& x);

    void
    calibration (::std::auto_ptr< calibration_type > p);

    // process_info
    // 
    typedef ::percolatorInNs::process_info process_info_type;
    typedef ::xsd::cxx::tree::traits< process_info_type, char > process_info_traits;

    const process_info_type&
    process_info () const;

    process_info_type&
    process_info ();

    void
    process_info (const process_info_type& x);

    void
    process_info (::std::auto_ptr< process_info_type > p);

    // featureDescriptions
    // 
    typedef ::percolatorInNs::featureDescriptions featureDescriptions_type;
    typedef ::xsd::cxx::tree::traits< featureDescriptions_type, char > featureDescriptions_traits;

    const featureDescriptions_type&
    featureDescriptions () const;

    featureDescriptions_type&
    featureDescriptions ();

    void
    featureDescriptions (const featureDescriptions_type& x);

    void
    featureDescriptions (::std::auto_ptr< featureDescriptions_type > p);

    // fragSpectrumScan
    // 
    typedef ::percolatorInNs::fragSpectrumScan fragSpectrumScan_type;
    typedef ::xsd::cxx::tree::sequence< fragSpectrumScan_type > fragSpectrumScan_sequence;
    typedef fragSpectrumScan_sequence::iterator fragSpectrumScan_iterator;
    typedef fragSpectrumScan_sequence::const_iterator fragSpectrumScan_const_iterator;
    typedef ::xsd::cxx::tree::traits< fragSpectrumScan_type, char > fragSpectrumScan_traits;

    const fragSpectrumScan_sequence&
    fragSpectrumScan () const;

    fragSpectrumScan_sequence&
    fragSpectrumScan ();

    void
    fragSpectrumScan (const fragSpectrumScan_sequence& s);

    // Constructors.
    //
    experiment (const enzyme_type&,
                const process_info_type&,
                const featureDescriptions_type&);

    experiment (const enzyme_type&,
                ::std::auto_ptr< process_info_type >&,
                ::std::auto_ptr< featureDescriptions_type >&);

    experiment (::xml_schema::istream< XDR >& s,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    experiment (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    experiment (const experiment& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual experiment*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~experiment ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    freeTextInformation_sequence freeTextInformation_;
    ::xsd::cxx::tree::one< enzyme_type > enzyme_;
    calibration_optional calibration_;
    ::xsd::cxx::tree::one< process_info_type > process_info_;
    ::xsd::cxx::tree::one< featureDescriptions_type > featureDescriptions_;
    fragSpectrumScan_sequence fragSpectrumScan_;
  };

  class probability_t_member: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >
  {
    public:
    probability_t_member (::xml_schema::double_ v);

    probability_t_member (::xml_schema::istream< XDR >& s,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    probability_t_member (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    probability_t_member (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    probability_t_member (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    probability_t_member (const probability_t_member& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual probability_t_member*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class probability_t_member1: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >
  {
    public:
    // Constructors.
    //
    probability_t_member1 (const ::xml_schema::double_&);

    probability_t_member1 (::xml_schema::istream< XDR >& s,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    probability_t_member1 (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    probability_t_member1 (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    probability_t_member1 (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    probability_t_member1 (const probability_t_member1& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual probability_t_member1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~probability_t_member1 ();
  };

  class uniMod: public ::xml_schema::type
  {
    public:
    // accession
    // 
    typedef ::xml_schema::int_ accession_type;
    typedef ::xsd::cxx::tree::traits< accession_type, char > accession_traits;

    const accession_type&
    accession () const;

    accession_type&
    accession ();

    void
    accession (const accession_type& x);

    // name
    // 
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::optional< name_type > name_optional;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_optional&
    name () const;

    name_optional&
    name ();

    void
    name (const name_type& x);

    void
    name (const name_optional& x);

    void
    name (::std::auto_ptr< name_type > p);

    // Constructors.
    //
    uniMod (const accession_type&);

    uniMod (::xml_schema::istream< XDR >& s,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    uniMod (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    uniMod (const uniMod& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual uniMod*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~uniMod ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    ::xsd::cxx::tree::one< accession_type > accession_;
    name_optional name_;
  };

  class freeTextInformation: public ::xml_schema::type
  {
    public:
    // name
    // 
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // value
    // 
    typedef ::xml_schema::string value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    freeTextInformation (const name_type&,
                         const value_type&);

    freeTextInformation (::xml_schema::istream< XDR >& s,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    freeTextInformation (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    freeTextInformation (const freeTextInformation& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual freeTextInformation*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~freeTextInformation ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class calibration: public ::xml_schema::type
  {
    public:
    // calibrationParameter
    // 
    typedef ::percolatorInNs::calibrationParameter calibrationParameter_type;
    typedef ::xsd::cxx::tree::sequence< calibrationParameter_type > calibrationParameter_sequence;
    typedef calibrationParameter_sequence::iterator calibrationParameter_iterator;
    typedef calibrationParameter_sequence::const_iterator calibrationParameter_const_iterator;
    typedef ::xsd::cxx::tree::traits< calibrationParameter_type, char > calibrationParameter_traits;

    const calibrationParameter_sequence&
    calibrationParameter () const;

    calibrationParameter_sequence&
    calibrationParameter ();

    void
    calibrationParameter (const calibrationParameter_sequence& s);

    // massType
    // 
    typedef ::percolatorInNs::massType massType_type;
    typedef ::xsd::cxx::tree::traits< massType_type, char > massType_traits;

    const massType_type&
    massType () const;

    massType_type&
    massType ();

    void
    massType (const massType_type& x);

    void
    massType (::std::auto_ptr< massType_type > p);

    // Constructors.
    //
    calibration (const massType_type&);

    calibration (::xml_schema::istream< XDR >& s,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    calibration (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    calibration (const calibration& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual calibration*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~calibration ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    calibrationParameter_sequence calibrationParameter_;
    ::xsd::cxx::tree::one< massType_type > massType_;
  };

  class process_info: public ::xml_schema::type
  {
    public:
    // command_line
    // 
    typedef ::xml_schema::string command_line_type;
    typedef ::xsd::cxx::tree::traits< command_line_type, char > command_line_traits;

    const command_line_type&
    command_line () const;

    command_line_type&
    command_line ();

    void
    command_line (const command_line_type& x);

    void
    command_line (::std::auto_ptr< command_line_type > p);

    // Constructors.
    //
    process_info (const command_line_type&);

    process_info (::xml_schema::istream< XDR >& s,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    process_info (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    process_info (const process_info& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual process_info*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~process_info ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    ::xsd::cxx::tree::one< command_line_type > command_line_;
  };

  class featureDescriptions: public ::xml_schema::type
  {
    public:
    // featureDescription
    // 
    typedef ::percolatorInNs::featureDescription featureDescription_type;
    typedef ::xsd::cxx::tree::sequence< featureDescription_type > featureDescription_sequence;
    typedef featureDescription_sequence::iterator featureDescription_iterator;
    typedef featureDescription_sequence::const_iterator featureDescription_const_iterator;
    typedef ::xsd::cxx::tree::traits< featureDescription_type, char > featureDescription_traits;

    const featureDescription_sequence&
    featureDescription () const;

    featureDescription_sequence&
    featureDescription ();

    void
    featureDescription (const featureDescription_sequence& s);

    // Constructors.
    //
    featureDescriptions ();

    featureDescriptions (::xml_schema::istream< XDR >& s,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    featureDescriptions (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    featureDescriptions (const featureDescriptions& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual featureDescriptions*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~featureDescriptions ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    featureDescription_sequence featureDescription_;
  };

  class fragSpectrumScan: public ::xml_schema::type
  {
    public:
    // peptideSpectrumMatch
    // 
    typedef ::percolatorInNs::peptideSpectrumMatch peptideSpectrumMatch_type;
    typedef ::xsd::cxx::tree::sequence< peptideSpectrumMatch_type > peptideSpectrumMatch_sequence;
    typedef peptideSpectrumMatch_sequence::iterator peptideSpectrumMatch_iterator;
    typedef peptideSpectrumMatch_sequence::const_iterator peptideSpectrumMatch_const_iterator;
    typedef ::xsd::cxx::tree::traits< peptideSpectrumMatch_type, char > peptideSpectrumMatch_traits;

    const peptideSpectrumMatch_sequence&
    peptideSpectrumMatch () const;

    peptideSpectrumMatch_sequence&
    peptideSpectrumMatch ();

    void
    peptideSpectrumMatch (const peptideSpectrumMatch_sequence& s);

    // scanNumber
    // 
    typedef ::xml_schema::unsigned_int scanNumber_type;
    typedef ::xsd::cxx::tree::traits< scanNumber_type, char > scanNumber_traits;

    const scanNumber_type&
    scanNumber () const;

    scanNumber_type&
    scanNumber ();

    void
    scanNumber (const scanNumber_type& x);

    // precision
    // 
    typedef ::xml_schema::double_ precision_type;
    typedef ::xsd::cxx::tree::optional< precision_type > precision_optional;
    typedef ::xsd::cxx::tree::traits< precision_type, char, ::xsd::cxx::tree::schema_type::double_ > precision_traits;

    const precision_optional&
    precision () const;

    precision_optional&
    precision ();

    void
    precision (const precision_type& x);

    void
    precision (const precision_optional& x);

    // experimentalMassToCharge
    // 
    typedef ::xml_schema::double_ experimentalMassToCharge_type;
    typedef ::xsd::cxx::tree::optional< experimentalMassToCharge_type > experimentalMassToCharge_optional;
    typedef ::xsd::cxx::tree::traits< experimentalMassToCharge_type, char, ::xsd::cxx::tree::schema_type::double_ > experimentalMassToCharge_traits;

    const experimentalMassToCharge_optional&
    experimentalMassToCharge () const;

    experimentalMassToCharge_optional&
    experimentalMassToCharge ();

    void
    experimentalMassToCharge (const experimentalMassToCharge_type& x);

    void
    experimentalMassToCharge (const experimentalMassToCharge_optional& x);

    // totalIonCurrent
    // 
    typedef ::xml_schema::double_ totalIonCurrent_type;
    typedef ::xsd::cxx::tree::optional< totalIonCurrent_type > totalIonCurrent_optional;
    typedef ::xsd::cxx::tree::traits< totalIonCurrent_type, char, ::xsd::cxx::tree::schema_type::double_ > totalIonCurrent_traits;

    const totalIonCurrent_optional&
    totalIonCurrent () const;

    totalIonCurrent_optional&
    totalIonCurrent ();

    void
    totalIonCurrent (const totalIonCurrent_type& x);

    void
    totalIonCurrent (const totalIonCurrent_optional& x);

    // Constructors.
    //
    fragSpectrumScan (const scanNumber_type&);

    fragSpectrumScan (::xml_schema::istream< XDR >& s,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    fragSpectrumScan (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    fragSpectrumScan (const fragSpectrumScan& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual fragSpectrumScan*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~fragSpectrumScan ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    peptideSpectrumMatch_sequence peptideSpectrumMatch_;
    ::xsd::cxx::tree::one< scanNumber_type > scanNumber_;
    precision_optional precision_;
    experimentalMassToCharge_optional experimentalMassToCharge_;
    totalIonCurrent_optional totalIonCurrent_;
  };

  class calibrationParameter: public ::xml_schema::type
  {
    public:
    // name
    // 
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // value
    // 
    typedef ::xml_schema::double_ value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char, ::xsd::cxx::tree::schema_type::double_ > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    // Constructors.
    //
    calibrationParameter (const name_type&,
                          const value_type&);

    calibrationParameter (::xml_schema::istream< XDR >& s,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    calibrationParameter (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    calibrationParameter (const calibrationParameter& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual calibrationParameter*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~calibrationParameter ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class massType: public ::xml_schema::token
  {
    public:
    enum value
    {
      monoisotopic,
      average
    };

    massType (value v);

    massType (const char* v);

    massType (const ::std::string& v);

    massType (const ::xml_schema::token& v);

    massType (::xml_schema::istream< XDR >& s,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    massType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    massType (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    massType (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    massType (const massType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual massType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    massType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_massType_convert ();
    }

    protected:
    value
    _xsd_massType_convert () const;

    public:
    static const char* const _xsd_massType_literals_[2];
    static const value _xsd_massType_indexes_[2];
  };

  class featureDescription: public ::xml_schema::type
  {
    public:
    // name
    // 
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // description
    // 
    typedef ::xml_schema::string description_type;
    typedef ::xsd::cxx::tree::optional< description_type > description_optional;
    typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

    const description_optional&
    description () const;

    description_optional&
    description ();

    void
    description (const description_type& x);

    void
    description (const description_optional& x);

    void
    description (::std::auto_ptr< description_type > p);

    // Constructors.
    //
    featureDescription (const name_type&);

    featureDescription (::xml_schema::istream< XDR >& s,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    featureDescription (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    featureDescription (const featureDescription& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual featureDescription*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~featureDescription ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    ::xsd::cxx::tree::one< name_type > name_;
    description_optional description_;
  };

  class peptideSpectrumMatch: public ::xml_schema::type
  {
    public:
    // features
    // 
    typedef ::percolatorInNs::features features_type;
    typedef ::xsd::cxx::tree::traits< features_type, char > features_traits;

    const features_type&
    features () const;

    features_type&
    features ();

    void
    features (const features_type& x);

    void
    features (::std::auto_ptr< features_type > p);

    // peptide
    // 
    typedef ::percolatorInNs::peptideType peptide_type;
    typedef ::xsd::cxx::tree::traits< peptide_type, char > peptide_traits;

    const peptide_type&
    peptide () const;

    peptide_type&
    peptide ();

    void
    peptide (const peptide_type& x);

    void
    peptide (::std::auto_ptr< peptide_type > p);

    // occurence
    // 
    typedef ::percolatorInNs::occurence occurence_type;
    typedef ::xsd::cxx::tree::sequence< occurence_type > occurence_sequence;
    typedef occurence_sequence::iterator occurence_iterator;
    typedef occurence_sequence::const_iterator occurence_const_iterator;
    typedef ::xsd::cxx::tree::traits< occurence_type, char > occurence_traits;

    const occurence_sequence&
    occurence () const;

    occurence_sequence&
    occurence ();

    void
    occurence (const occurence_sequence& s);

    // id
    // 
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::auto_ptr< id_type > p);

    // isDecoy
    // 
    typedef ::xml_schema::boolean isDecoy_type;
    typedef ::xsd::cxx::tree::traits< isDecoy_type, char > isDecoy_traits;

    const isDecoy_type&
    isDecoy () const;

    isDecoy_type&
    isDecoy ();

    void
    isDecoy (const isDecoy_type& x);

    // observedTime
    // 
    typedef ::xml_schema::double_ observedTime_type;
    typedef ::xsd::cxx::tree::optional< observedTime_type > observedTime_optional;
    typedef ::xsd::cxx::tree::traits< observedTime_type, char, ::xsd::cxx::tree::schema_type::double_ > observedTime_traits;

    const observedTime_optional&
    observedTime () const;

    observedTime_optional&
    observedTime ();

    void
    observedTime (const observedTime_type& x);

    void
    observedTime (const observedTime_optional& x);

    // experimentalMassToCharge
    // 
    typedef ::xml_schema::double_ experimentalMassToCharge_type;
    typedef ::xsd::cxx::tree::traits< experimentalMassToCharge_type, char, ::xsd::cxx::tree::schema_type::double_ > experimentalMassToCharge_traits;

    const experimentalMassToCharge_type&
    experimentalMassToCharge () const;

    experimentalMassToCharge_type&
    experimentalMassToCharge ();

    void
    experimentalMassToCharge (const experimentalMassToCharge_type& x);

    // calculatedMassToCharge
    // 
    typedef ::xml_schema::double_ calculatedMassToCharge_type;
    typedef ::xsd::cxx::tree::traits< calculatedMassToCharge_type, char, ::xsd::cxx::tree::schema_type::double_ > calculatedMassToCharge_traits;

    const calculatedMassToCharge_type&
    calculatedMassToCharge () const;

    calculatedMassToCharge_type&
    calculatedMassToCharge ();

    void
    calculatedMassToCharge (const calculatedMassToCharge_type& x);

    // chargeState
    // 
    typedef ::xml_schema::int_ chargeState_type;
    typedef ::xsd::cxx::tree::traits< chargeState_type, char > chargeState_traits;

    const chargeState_type&
    chargeState () const;

    chargeState_type&
    chargeState ();

    void
    chargeState (const chargeState_type& x);

    // Constructors.
    //
    peptideSpectrumMatch (const features_type&,
                          const peptide_type&,
                          const id_type&,
                          const isDecoy_type&,
                          const experimentalMassToCharge_type&,
                          const calculatedMassToCharge_type&,
                          const chargeState_type&);

    peptideSpectrumMatch (::std::auto_ptr< features_type >&,
                          ::std::auto_ptr< peptide_type >&,
                          const id_type&,
                          const isDecoy_type&,
                          const experimentalMassToCharge_type&,
                          const calculatedMassToCharge_type&,
                          const chargeState_type&);

    peptideSpectrumMatch (::xml_schema::istream< XDR >& s,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    peptideSpectrumMatch (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    peptideSpectrumMatch (const peptideSpectrumMatch& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual peptideSpectrumMatch*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~peptideSpectrumMatch ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    ::xsd::cxx::tree::one< features_type > features_;
    ::xsd::cxx::tree::one< peptide_type > peptide_;
    occurence_sequence occurence_;
    ::xsd::cxx::tree::one< id_type > id_;
    ::xsd::cxx::tree::one< isDecoy_type > isDecoy_;
    observedTime_optional observedTime_;
    ::xsd::cxx::tree::one< experimentalMassToCharge_type > experimentalMassToCharge_;
    ::xsd::cxx::tree::one< calculatedMassToCharge_type > calculatedMassToCharge_;
    ::xsd::cxx::tree::one< chargeState_type > chargeState_;
  };

  class features: public ::xml_schema::type
  {
    public:
    // feature
    // 
    typedef ::xml_schema::double_ feature_type;
    typedef ::xsd::cxx::tree::sequence< feature_type > feature_sequence;
    typedef feature_sequence::iterator feature_iterator;
    typedef feature_sequence::const_iterator feature_const_iterator;
    typedef ::xsd::cxx::tree::traits< feature_type, char, ::xsd::cxx::tree::schema_type::double_ > feature_traits;

    const feature_sequence&
    feature () const;

    feature_sequence&
    feature ();

    void
    feature (const feature_sequence& s);

    // Constructors.
    //
    features ();

    features (::xml_schema::istream< XDR >& s,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    features (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    features (const features& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual features*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~features ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    feature_sequence feature_;
  };

  class occurence: public ::xml_schema::type
  {
    public:
    // proteinId
    // 
    typedef ::xml_schema::string proteinId_type;
    typedef ::xsd::cxx::tree::traits< proteinId_type, char > proteinId_traits;

    const proteinId_type&
    proteinId () const;

    proteinId_type&
    proteinId ();

    void
    proteinId (const proteinId_type& x);

    void
    proteinId (::std::auto_ptr< proteinId_type > p);

    // startPosition
    // 
    typedef ::percolatorInNs::startPosition startPosition_type;
    typedef ::xsd::cxx::tree::optional< startPosition_type > startPosition_optional;
    typedef ::xsd::cxx::tree::traits< startPosition_type, char > startPosition_traits;

    const startPosition_optional&
    startPosition () const;

    startPosition_optional&
    startPosition ();

    void
    startPosition (const startPosition_type& x);

    void
    startPosition (const startPosition_optional& x);

    void
    startPosition (::std::auto_ptr< startPosition_type > p);

    // flankN
    // 
    typedef ::percolatorInNs::aa_term_t flankN_type;
    typedef ::xsd::cxx::tree::traits< flankN_type, char > flankN_traits;

    const flankN_type&
    flankN () const;

    flankN_type&
    flankN ();

    void
    flankN (const flankN_type& x);

    void
    flankN (::std::auto_ptr< flankN_type > p);

    // flankC
    // 
    typedef ::percolatorInNs::aa_term_t flankC_type;
    typedef ::xsd::cxx::tree::traits< flankC_type, char > flankC_traits;

    const flankC_type&
    flankC () const;

    flankC_type&
    flankC ();

    void
    flankC (const flankC_type& x);

    void
    flankC (::std::auto_ptr< flankC_type > p);

    // Constructors.
    //
    occurence (const proteinId_type&,
               const flankN_type&,
               const flankC_type&);

    occurence (::xml_schema::istream< XDR >& s,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    occurence (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    occurence (const occurence& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual occurence*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~occurence ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    void
    parse (::xml_schema::istream< XDR >&,
           ::xml_schema::flags);

    ::xsd::cxx::tree::one< proteinId_type > proteinId_;
    startPosition_optional startPosition_;
    ::xsd::cxx::tree::one< flankN_type > flankN_;
    ::xsd::cxx::tree::one< flankC_type > flankC_;
  };

  class startPosition: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    startPosition (const ::xml_schema::int_&);

    startPosition (::xml_schema::istream< XDR >& s,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    startPosition (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    startPosition (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    startPosition (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    startPosition (const startPosition& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual startPosition*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~startPosition ();
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace percolatorInNs
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::percolatorInNs::experiment >
  experiment_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorInNs::experiment >
  experiment_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorInNs::experiment >
  experiment_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::percolatorInNs::experiment >
  experiment_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorInNs::experiment >
  experiment_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorInNs::experiment >
  experiment_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorInNs::experiment >
  experiment_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorInNs::experiment >
  experiment_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorInNs::experiment >
  experiment_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::percolatorInNs::experiment >
  experiment_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorInNs::experiment >
  experiment_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorInNs::experiment >
  experiment_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::percolatorInNs::experiment >
  experiment_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::percolatorInNs::experiment >
  experiment_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace percolatorInNs
{
  // Serialize to std::ostream.
  //

  void
  experiment_ (::std::ostream& os,
               const ::percolatorInNs::experiment& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  experiment_ (::std::ostream& os,
               const ::percolatorInNs::experiment& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  experiment_ (::std::ostream& os,
               const ::percolatorInNs::experiment& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  experiment_ (::xercesc::XMLFormatTarget& ft,
               const ::percolatorInNs::experiment& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  experiment_ (::xercesc::XMLFormatTarget& ft,
               const ::percolatorInNs::experiment& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  experiment_ (::xercesc::XMLFormatTarget& ft,
               const ::percolatorInNs::experiment& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  experiment_ (::xercesc::DOMDocument& d,
               const ::percolatorInNs::experiment& x,
               ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  experiment_ (const ::percolatorInNs::experiment& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const probability_t&);

  void
  operator<< (::xercesc::DOMAttr&, const probability_t&);

  void
  operator<< (::xml_schema::list_stream&,
              const probability_t&);

  void
  operator<< (::xercesc::DOMElement&, const aa_seq_t&);

  void
  operator<< (::xercesc::DOMAttr&, const aa_seq_t&);

  void
  operator<< (::xml_schema::list_stream&,
              const aa_seq_t&);

  void
  operator<< (::xercesc::DOMElement&, const aa_term_t&);

  void
  operator<< (::xercesc::DOMAttr&, const aa_term_t&);

  void
  operator<< (::xml_schema::list_stream&,
              const aa_term_t&);

  void
  operator<< (::xercesc::DOMElement&, const peptideType&);

  void
  operator<< (::xercesc::DOMElement&, const modificationType&);

  void
  operator<< (::xercesc::DOMElement&, const experiment&);

  void
  operator<< (::xercesc::DOMElement&, const probability_t_member&);

  void
  operator<< (::xercesc::DOMAttr&, const probability_t_member&);

  void
  operator<< (::xml_schema::list_stream&,
              const probability_t_member&);

  void
  operator<< (::xercesc::DOMElement&, const probability_t_member1&);

  void
  operator<< (::xercesc::DOMAttr&, const probability_t_member1&);

  void
  operator<< (::xml_schema::list_stream&,
              const probability_t_member1&);

  void
  operator<< (::xercesc::DOMElement&, const uniMod&);

  void
  operator<< (::xercesc::DOMElement&, const freeTextInformation&);

  void
  operator<< (::xercesc::DOMElement&, const calibration&);

  void
  operator<< (::xercesc::DOMElement&, const process_info&);

  void
  operator<< (::xercesc::DOMElement&, const featureDescriptions&);

  void
  operator<< (::xercesc::DOMElement&, const fragSpectrumScan&);

  void
  operator<< (::xercesc::DOMElement&, const calibrationParameter&);

  void
  operator<< (::xercesc::DOMElement&, const massType&);

  void
  operator<< (::xercesc::DOMAttr&, const massType&);

  void
  operator<< (::xml_schema::list_stream&,
              const massType&);

  void
  operator<< (::xercesc::DOMElement&, const featureDescription&);

  void
  operator<< (::xercesc::DOMElement&, const peptideSpectrumMatch&);

  void
  operator<< (::xercesc::DOMElement&, const features&);

  void
  operator<< (::xercesc::DOMElement&, const occurence&);

  void
  operator<< (::xercesc::DOMElement&, const startPosition&);

  void
  operator<< (::xercesc::DOMAttr&, const startPosition&);

  void
  operator<< (::xml_schema::list_stream&,
              const startPosition&);
}

namespace percolatorInNs
{
  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const probability_t&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const aa_seq_t&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const aa_term_t&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const peptideType&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const modificationType&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const experiment&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const probability_t_member&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const probability_t_member1&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const uniMod&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const freeTextInformation&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const calibration&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const process_info&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const featureDescriptions&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const fragSpectrumScan&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const calibrationParameter&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const massType&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const featureDescription&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const peptideSpectrumMatch&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const features&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const occurence&);

  ::xml_schema::ostream< XDR >&
  operator<< (::xml_schema::ostream< XDR >&,
              const startPosition&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_USERS_CEGRANT_PROJECTS_CRUX_TRUNK_SRC_EXTERNAL_BUILD_SRC_PERCOLATOR_SRC_XML_PERCOLATOR_IN_HXX
