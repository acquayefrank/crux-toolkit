#List of commands to be run by crux-test.pl
# Format is these fields separated by '
#    test name             (printed to the output as a label for the command)
#    standard filename     (path to file with the expected output)
#    command               (command with options and args to be run)
#    ignore string         (regex to ignore for diff command, 're 1' 're 2'

# TESTS WITH NO INDEX

# Generate Peptides
generate_peptides_no_ops = good_results/standard_generate_peptides_no_ops.out = crux-generate-peptides test.fasta =

generate_peptides_default = good_results/standard_generate_peptides_default.out = crux-generate-peptides  --output-sequence T test.fasta =

generate_peptides_sort_mass_unique = good_results/standard_generate_peptides_mass.out = crux-generate-peptides --parameter-file params/params_uniq --output-sequence T --enzyme no-enzyme --sort mass  test.fasta =

generate_peptides_sort_length_unique = good_results/standard_generate_peptides_length.out = crux-generate-peptides --parameter-file params/params_uniq --output-sequence T --enzyme trypsin --missed-cleavages T --sort length test.fasta =

generate_peptides_sort_lexical_unique = good_results/standard_generate_peptides_lexical.out = crux-generate-peptides --parameter-file params/params_uniq --output-sequence T --enzyme trypsin --digestion partial-digest --missed-cleavages T --sort lexical test.fasta =

generate_peptides_change_minmax = good_results/standard_generate_peptides_change_minmax = crux-generate-peptides --parameter-file params/many_changes --output-sequence T --max-length 20 test.fasta=

generate_peptides_mods = good_results/standard_generate_peptides_mods = crux-generate-peptides --parameter-file params/mods --output-sequence T --max-length 20 test.fasta =

generate_peptides_chymo = good_results/standard_generate_peptides_chymo = crux-generate-peptides --parameter-file params/chymo --output-sequence T test.fasta = 

# Get spectrum
get_ms2_spectrum = good_results/standard_get_ms2_spectrum.out = rm -f get_ms2_spectrum.out; crux-get-ms2-spectrum 2 test.ms2 =

get_ms2_spectrum_stats = good_results/standard_get_ms2_spectrum_stats.out = rm -f get_ms2_spectrum.out; crux-get-ms2-spectrum --stats T 2 test.ms2 =

# Predict ion series
predict_ions_no_ops = good_results/standard_predict_ions_no_ops.out = crux-predict-peptide-ions IAMASEQ 2=

predict_ions_b_h2o = good_results/standard_predict_ions_b_h2o.out = crux-predict-peptide-ions --primary-ions b --precursor-ions T --h2o 1 IAMASEQ 2 =

predict_ions_y_nh3 = good_results/standard_predict_ions_y_nh3.out = crux-predict-peptide-ions --primary-ions y  --nh3 1 IAMASEQ 2=

predict_ions_by_flank_max_z1 = good_results/standard_predict_ions_by_flank_max_z1.out = crux-predict-peptide-ions --primary-ions by --max-ion-charge 1 --flanking T IAMASEQ 3=

# Search for matches and test sqt file
search_for_matches_default = good_results/search_for_matches_default.target.txt = crux search-for-matches --parameter-file params/set_rand_seed test.ms2 test.fasta; cat crux-output/search.target.txt = 'Time' 'atabase'

# Search for matches without Sp
search_no_sp = good_results/no-sp.txt = crux search-for-matches --parameter-file params/no-sp test.ms2 test.fasta; cat crux-output/search.target.txt

# Analyze existing search results
analyze_matches_existing = good_results/analyze_matches_existing.percolator.target.txt = crux percolator --overwrite T --output-dir existing_search test.fasta; cat existing_search/percolator.target.txt = 'Time' 'Database'

# Search for matches with all defaults (except for the rand seed), no sqt file to test so use analyze
search_for_matches_noops = good_results/empty_file = rm -rf crux-output;crux search-for-matches --parameter-file params/set_rand_seed test.ms2 test.fasta; = 'Time'

# Analyze matches to test default search, use no ops
analyze_matches_no_ops_test_search = good_results/analyze_matches_no_ops_test_search.percolator.tartet.txt =  crux percolator --parameter-file params/set_rand_seed test.fasta ; cat crux-output/percolator.target.txt = 'Time'

# Search and estimate p-values
search_pvalues = good_results/search_pvalues.target.txt = rm -rf crux-output; crux search-for-matches --parameter-file params/pval demo.ms2 small-yeast.fasta; cat crux-output/search.target.txt = 'Time'

# Get q-values from above search
compute-q-values = good_results/qvalues.txt = crux compute-q-values --parameter-file params/pval small-yeast.fasta ; cat crux-output/qvalues.target.txt 

# Search for matches with modifications
search_mods_fasta = good_results/search_mods_fasta.target.txt = rm -rf crux-output; crux search-for-matches --parameter-file params/mods test.ms2 test.fasta; cat crux-output/search.target.txt = 'Time' 'Database'

# Analyze matches with modifications
reverse_sequence = good_results/reverse.decoy.txt = crux search-for-matches --parameter-file params/reverse test.ms2 test-plus-palindrome.fasta; cat crux-output/reverse.search.decoy.txt

# Search for matches and estimate p-values with modifications
# TODO

# Search with elastase
search_elastase = good_results/search_elastase.target.txt = rm -rf crux-output;crux search-for-matches --parameter-file params/elastase  test.ms2 test.fasta; cat crux-output/search.target.txt = 'Time'

# Search with custom enzyme set to elastase rules
search_custom_like_elastase = good_results/search_custom_like_elastase.target.txt = rm -rf crux-output;crux search-for-matches --parameter-file params/custom-enzyme  test.ms2 test.fasta; cat crux-output/search.target.txt = 'Time' 'EnzymeSpec'

# Print decoys to target file (previously the --tdc option)
search_tdc = good_results/search_tdc.target.txt = rm -rf tdc; crux search-for-matches --parameter-file params/tdc test.ms2 test.fasta;  cat tdc/search.target.txt = 'Time'

# Search 3 decoys per target but print all decoys to one file
decoys_one_file = good_results/decoys_one_file.decoy.txt = rm -rf one-decoy-file; crux search-for-matches --parameter-file params/one-decoy-file test.ms2 test.fasta; cat one-decoy-file/search.decoy.txt = 'Time'

# Confirm that no decoy files were created for tdc and that only one decoy file created for one-decoy-file
list_files = good_results/list-files-tdc-one-decoy-file = ls one-decoy-file tdc  

# TESTS WITH INDEX

# See that crux-generate-peptides works with an existing index
generate_peptides_use_existing_index = good_results/standard_generate_peptides_use_exisiting_index.out = crux-generate-peptides --output-sequence T  --enzyme trypsin existing_crux_index = '# PROTEIN DATABASE'

# See that crux-search-for-matches works with existing index
search_for_matches_default_existing_index = good_results/search_for_matches_default_existing_index.target.txt = rm -rf crux-output; crux search-for-matches --parameter-file params/set_rand_seed test.ms2 existing_crux_index; cat crux-output/search.target.txt = 'Time' 'Database'

# See that match_analysis works with an existing index and existing results
analyze_matches_existing_index_and_results = good_results/analyze_matches_existing_index_and_results.percolator.target.txt =  rm -f existing_search/percolator*; crux percolator --output-dir existing_search existing_crux_index; cat existing_search/percolator.target.txt = 'StartTime' 'Database'

# See that match_analysis works with an existing index and new results
analyze_matches_existing_index = good_results/analyze_matches_existing_index.percolator.target.txt =  crux percolator --parameter-file params/set_rand_seed existing_crux_index; cat crux-output/percolator.target.txt = 'StartTime'

# Create index. Use crux-generate-peptides to test that it worked

create_index_default = good_results/standard_create_index_default.out = rm -rf test_crux_index; crux create-index test.fasta test_crux_index; cat test_crux_index/README test_crux_index/crux_index_map = 'time'

generate_peptides_test_index = good_results/standard_generate_peptides_use_index.out = crux-generate-peptides --output-sequence T test_crux_index = '# PROTEIN DATABASE'

# test that mods work with the index
generate_peptides_mods = good_results/standard_generate_peptides_mods_index = crux-generate-peptides --parameter-file params/mods --output-sequence T --max-length 20  test_crux_index =

#create_index_uniq = good_results/standard_create_index_uniq.out = rm -rf test_crux_index; crux create-index --unique-peptides T test.fasta test_crux_index; cat test_crux_index/README test_crux_index/crux_index_map = 'time'

# use crux-generate-peptides to test that it worked
generate_peptides_test_index_uniq = good_results/standard_generate_peptides_use_index_uniq.out = crux-generate-peptides --parameter-file params/params_uniq --output-sequence T  test_crux_index=

# Search for matches and test txt file
search_for_matches_default_index = good_results/search_for_matches_default_index.target.txt = crux search-for-matches --overwrite T --parameter-file params/params_uniq test.ms2 test_crux_index; cat crux-output/search.target.txt = 'Time' 'Database'

# Analyze matches using above index
analyze_matches_index = good_results/analyze_matches_index.percolator.target.txt =  crux percolator --overwrite T --parameter-file params/set_rand_seed test_crux_index; cat crux-output/percolator.target.txt = 'StartTime'

# Search for matches with modifications from index
search_mods_index = good_results/search_mods_index.target.txt = crux search-for-matches --parameter-file params/mods test.ms2 existing_crux_index; cat crux-output/search.target.txt = 'Time' 'Database'

# Analyze matches with modifications from index
analyze_mods_index = good_results/analyze_mods_index.percolator.target.txt = crux percolator --overwrite T --parameter-file params/mods existing_crux_index; cat crux-output/percolator.target.txt = 'Time' 'Database'

# Test the q-values generated from decoys
decoy_qval = good_results/decoy-qval.txt = rm -rf decoy-qval-pval; crux search-for-matches --parameter-file params/decoy-qval-pval demo.ms2 small-yeast.fasta; crux compute-q-values --parameter-file params/decoy-qval-pval small-yeast.fasta; cat decoy-qval-pval/qvalues.target.txt

# Do mod search with spec that match sequest results exactly
sequest_matching_search = good_results/seq_test.sqt = crux sequest-search --parameter-file params/mods-sequest select-spectra.ms2 index-for-sequest-comparison; cat crux-output/sequest.target.sqt = 'Time' 

# More tests for sequest-search
# Decoys in separate files, 2 decoys per target
separate-ss = good_results/separate-ss = rm -f ss/separate*; crux sequest-search --output-dir ss --fileroot separate --parameter-file params/separate-ss demo.ms2 small-yeast.fasta; cat ss/separate*t = 'StartTime'

# Test that percolator works with the .csm files
perc-ss = good_results/perc-ss = rm -f ss/one*csm ss/tdc*csm ss/no*csm ss/perc*; crux percolator --parameter-file params/separate-ss small-yeast.fasta; cat ss/percolator.target.txt  =

# Decoys in one file, 2 decoys per target
one-decoy-file-ss = good_results/one-decoy-file-ss = rm -f ss/one-decoy-file*; crux sequest-search --output-dir ss --fileroot one-decoy-file --parameter-file params/one-decoy-file-ss demo.ms2 small-yeast.fasta; cat ss/one-decoy-file*t = 'StartTime'

# Decoys with target, 1 decoy per target
tdc-ss = good_results/tdc-ss = rm -f ss/tdc*; crux sequest-search --output-dir ss --fileroot tdc --parameter-file params/tdc-ss demo.ms2 small-yeast.fasta; cat ss/tdc*t = 'StartTime'

# No decoys
no-decoys-ss = good_results/no-decoys-ss = rm -f ss/no-decoys*; crux sequest-search --output-dir ss --fileroot no-decoys --parameter-file params/no-decoys-ss demo.ms2 small-yeast.fasta; cat ss/no-decoys*t = 'StartTime'

# search only a select number of spectra with the --scan option
search_select_scans = good_results/search_select_scans.target.txt = crux search-for-matches --scan-number 150-153 --parameter-file params/minimal demo.ms2 small-yeast.fasta; cat crux-output/search.target.txt


# MORE TESTS TODO

# generate tryptic peptides from non-tryptic index
# analyze matches using qvalue
# use ms2/fasta combos that do and do not find at least one peptide for each spec
# named sqt and decoys
# search with 0, 1 decoys
